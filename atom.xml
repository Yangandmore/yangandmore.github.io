<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨小杨的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-07T13:37:51.768Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-装饰</title>
    <link href="http://example.com/2023/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9/"/>
    <id>http://example.com/2023/02/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9/</id>
    <published>2023-02-07T18:47:30.000Z</published>
    <updated>2023-02-07T13:37:51.768Z</updated>
    
    <content type="html"><![CDATA[<p>最好的例子就是ui图，在针对富文本进行编辑的时候，工具栏、文本栏、保存/取消栏等，都是是在其基础上进行装饰的效果。</p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li>处理那些可能撤销的职责</li><li>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/9.png" alt="github"></p>]]></content>
    
    
    <summary type="html">装饰</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式- 桥接</title>
    <link href="http://example.com/2023/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7/"/>
    <id>http://example.com/2023/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7/</id>
    <published>2023-02-06T19:46:00.000Z</published>
    <updated>2023-02-06T13:10:47.040Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">pubic <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Food</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatFood</span> <span class="hljs-title">implement</span> <span class="hljs-title">Food</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫粮&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DogFood</span> <span class="hljs-title">implement</span> <span class="hljs-title">Food</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗粮&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>准备动物<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">protected</span> Food food;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(Food food)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.food = food;<br>    &#125;<br>    <br>    <span class="hljs-function">pubic <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(Food food)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(Food food)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(food);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;mimi-&quot;</span>);<br>        food.name();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(Food food)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(food);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;wowo-&quot;</span>);<br>        food.name();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个流程代码中写的很清楚了<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Dog(<span class="hljs-keyword">new</span> DogFood()).eat();<br>        <span class="hljs-keyword">new</span> Dog(<span class="hljs-keyword">new</span> CatFood()).eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>看着狗在吃猫粮，原则上有点说不通，但是确实可以，只要是粮食。整个设计是将抽象类嵌入一个接口，让他具有使用这个接口的能力。</p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>不希望在抽象和他的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。</li><li>类的抽象以及他的实现都应该可以通过生成子类的方法加以扩充。这时桥接模式使你可以对不同的抽象接口和实现部分进行组合，并分别对他们进行扩充。</li><li>对一个抽象的实现部分的修改应对客户不产生影响，及客户的代码不必重新编译。</li><li>必须将一个对象分解成两个部分。称这种类层次结构为<strong>嵌套的概括</strong>。</li><li>在多个对象间共享实现（可能是引用计数），但同时要求客户并不知道这一点。</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/7.png" alt="github"></p>]]></content>
    
    
    <summary type="html">桥接</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式- 组合</title>
    <link href="http://example.com/2023/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8/"/>
    <id>http://example.com/2023/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8/</id>
    <published>2023-02-06T19:46:00.000Z</published>
    <updated>2023-02-07T10:49:04.114Z</updated>
    
    <content type="html"><![CDATA[<p>组合很好的例子就是画图的时候，图中有图，有文字，有线条等。</p><p>基础接口<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Graphic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Graphic graphic)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Graphic graphic)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getChild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> child)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>看看普通leaf组建<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Text</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Graphic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;文本&quot;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Graphic graphic)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Graphic graphic)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getChild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> child)</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>他并不具备子部件功能</p><p>看看Composite组建<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Picture</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Graphic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(Graphic g : list) <br>            g.draw();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Graphic graphic)</span> </span>&#123;<br>        list.add(graphic);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Graphic graphic)</span> </span>&#123;<br>        list.remove(graphic);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getChild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> child)</span> </span>&#123;<br>        ...<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>想表示对象的部分-整体层次结构</li><li>希望用户忽略组合对象与单个对象的不同，用户将统一的使用组合结构中的所有对象</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/8.png" alt="github"></p>]]></content>
    
    
    <summary type="html">组合</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-原型</title>
    <link href="http://example.com/2023/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4/"/>
    <id>http://example.com/2023/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4/</id>
    <published>2023-02-02T18:00:35.000Z</published>
    <updated>2023-02-02T13:10:05.280Z</updated>
    
    <content type="html"><![CDATA[<p>克隆（clone）非常适合这里的说明，复制一个类实例。</p><p>但是这里涉及到了：浅拷贝和深拷贝。<br>他们在java中有原始类型和引用类型（这真对引用类型）。所谓浅拷贝只是拷贝对象的引用，而非里面这个对象里面的所有值；深拷贝则相反，并不知拷贝引用，而是新建一个引用并复制原始对象中的所有值。</p><p><img src="/img/DesignPatterns/4.png" alt="github"></p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>当一个系统应该独立于他的产品创建、构成及表示时</li><li>当要实例化的类是在运行时刻指定时，例如动态装载</li><li>为了避免创建一个与产品类层次平行的工厂类层次时</li><li>当一个类的实例只能有几个不同状态组合中的一种时</li></ol><p>建立相应数目的原型并克隆他可能比每次用合适的手工实例更方便。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/3.png" alt="github"></p>]]></content>
    
    
    <summary type="html">原型</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例</title>
    <link href="http://example.com/2023/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5/"/>
    <id>http://example.com/2023/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5/</id>
    <published>2023-02-02T18:00:35.000Z</published>
    <updated>2023-02-02T13:22:46.396Z</updated>
    
    <content type="html"><![CDATA[<p>整个系统针对他只提供一个创建点。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">World</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> World world;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">World</span><span class="hljs-params">()</span> </span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> World <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (world == <span class="hljs-keyword">null</span>)<br>            world = <span class="hljs-keyword">new</span> World();<br>        <span class="hljs-keyword">return</span> world;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这里需要注意的一点就是构造函数使用了访问权限private修饰，表示别的地方无法构建该对象，除了他自己。</p><p>另外由于多线程安全问题，这里一般推荐下面的写法：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">World</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> World world;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">World</span><span class="hljs-params">()</span> </span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> World <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span>(World.class) &#123;<br>            <span class="hljs-keyword">if</span> (world == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">synchronized</span>(World.class) &#123;<br>                    world = <span class="hljs-keyword">new</span> World();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> world;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问他</li><li>当这个唯一实例应该是通过子类化可扩展的，而且客户应该无需更改代码就能使用一个扩展的实例</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/5.png" alt="github"></p>]]></content>
    
    
    <summary type="html">单例</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-构建者</title>
    <link href="http://example.com/2023/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3/"/>
    <id>http://example.com/2023/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3/</id>
    <published>2023-02-02T15:10:25.000Z</published>
    <updated>2023-02-02T09:39:00.806Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个狗，非常简单，但是狗里的很多部件都是一个个对象。面对一个复杂的问题，需要复杂的对象来处理。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class Dog extends Animal &#123;<br>    <span class="hljs-keyword">private</span> String head;<br>    <span class="hljs-keyword">private</span> String limbs;<br>    <span class="hljs-keyword">private</span> String body;<br>    <span class="hljs-keyword">private</span> String tails;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHead</span><span class="hljs-params">(String head)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.head = head;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLimbs</span><span class="hljs-params">(String limbs)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.limbs = limbs;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBody</span><span class="hljs-params">(String body)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.body = body;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTails</span><span class="hljs-params">(String tails)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tails = tails;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (StringUtil.isNotEmpty(head)<br>        &amp;&amp; StringUtil.isNotEmpty(head)<br>        &amp;&amp; StringUtil.isNotEmpty(body)<br>        &amp;&amp; StringUtil.isNotEmpty(tails))<br>            System.out.println(<span class="hljs-string">&quot;wang！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>只需要我们填充完毕，小狗就可以表演了。<br>我们从代码已经看出来他需要哪些组建，但是这个过程并不直接通过new，因为它需要抽象一层，具有广泛性。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Builder</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildHead</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildLimbs</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBody</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildTails</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">build</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>准备好构建接口后，需要创建一个用于生产小狗的基地。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DogBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Builder</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DogBuilder</span><span class="hljs-params">()</span> </span>&#123;<br>        dog = <span class="hljs-keyword">new</span> Dog();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildHead</span><span class="hljs-params">()</span> </span>&#123;<br>        dog.setHead(<span class="hljs-string">&quot;head&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildLimbs</span><span class="hljs-params">()</span> </span>&#123;<br>        dog.setLimbs(<span class="hljs-string">&quot;limbs&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBody</span><span class="hljs-params">()</span> </span>&#123;<br>        dog.setBody(<span class="hljs-string">&quot;body&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildTails</span><span class="hljs-params">()</span> </span>&#123;<br>        dog.setTails(<span class="hljs-string">&quot;tails&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dog;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这样我们就可以根据构建的DogBuilder来构造小狗了。<br>接下来，需要让谁来构建小狗：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">World</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Builder builder;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">World</span><span class="hljs-params">(Builder builder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.builder = builder;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBuilder</span><span class="hljs-params">(Builder builder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.builder = builder;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Builder <span class="hljs-title">create</span><span class="hljs-params">()</span> </span>&#123;<br>        builder.buildHead();<br>        builder.buildLimbs();<br>        builder.buildBody();<br>        builder.buildTails();<br>        <br>        <span class="hljs-keyword">return</span> builder;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>他来帮助我们完成构建一个小狗，并且在此基础上进行抽象为Builder即可。只需要针对指定的Builder实现类添加即可，他会返回给我们需要的对象。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Garden</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] arg)</span> </span>&#123;<br>        Builder dog = <span class="hljs-keyword">new</span> DogBuilder();<br>        Builder cat = <span class="hljs-keyword">new</span> CatBuilder();<br>        <br>        World world = <span class="hljs-keyword">new</span> World(dog);<br>        Builder dog = world.create();<br>        <br>        world.setBuilder(cat);<br>        Builder cat = world.create();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>当创建复杂对象的算法应该独立于该对象的组成部分以及他们的装配方式时。</li><li>当构造过程必须允许被构造的对象有不同的表示时。</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/2.png" alt="github"></p>]]></content>
    
    
    <summary type="html">构建者</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-静态工厂</title>
    <link href="http://example.com/2023/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2/"/>
    <id>http://example.com/2023/01/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2/</id>
    <published>2023-01-31T15:55:25.000Z</published>
    <updated>2023-01-31T14:41:00.507Z</updated>
    
    <content type="html"><![CDATA[<p>工厂方法的变种。提供一个创建一系列相关或互相依赖对象的接口，而无需指定具体的类。</p><p>针对动物，不同种类做具体创建。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> String sing;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String sing)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sing = sing;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 抽象方法，用于子类使用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>那么我就就针对下面的动物进行创建</p><ul><li>陆地动物</li><li>海洋动物</li><li>飞行动物</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String sing)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(sing);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;dog：&quot;</span>+sing);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaQue</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaQue</span><span class="hljs-params">(String sing)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(sing);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;MaQue：&quot;</span>+sing);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LongXia</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LongXia</span><span class="hljs-params">(String sing)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(sing);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;LongXia：&quot;</span>+sing);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据工厂方法写出上面代码，但是并没有根据类型形成独特的工厂。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AbstractAnimal</span> </span>&#123;<br>    <span class="hljs-comment">// 创建飞行动物</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">createFlyingAnimal</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 创建陆地动物</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">createLandAnimal</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 创建海洋动物</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">createMarineAnimal</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>实现接口<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TheWorldAnimal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AbstractAnimal</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TheWorldAnimal</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 创建飞行动物</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">createFlyingAnimal</span><span class="hljs-params">()</span> </span>&#123;<br>        Animal maque = <span class="hljs-keyword">new</span> MaQue();<br>        <span class="hljs-keyword">return</span> maque;<br>    &#125;<br>    <span class="hljs-comment">// 创建陆地动物</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">createLandAnimal</span><span class="hljs-params">()</span> </span>&#123;<br>        Animal dog = <span class="hljs-keyword">new</span> Dog();<br>        <span class="hljs-keyword">return</span> dog;<br>    &#125;<br>    <span class="hljs-comment">// 创建海洋动物</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">createMarineAnimal</span><span class="hljs-params">()</span> </span>&#123;<br>        Animal longxia = <span class="hljs-keyword">new</span> LongXia();<br>        <span class="hljs-keyword">return</span> longxia;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这样就根据三个类型得到三个工厂，并将三个工厂集成到一个工厂中。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] arg)</span> </span>&#123;<br>    AbstractAnimal factory = <span class="hljs-keyword">new</span> TheWorldAnimal();<br>    Animal flyingAnimal = factory.createFlyingAnimal();<br>    flyingAnimal.show();<br>    Animal landAnimal = factory.createLandAnimal();<br>    landAnimal.show();<br>    Animal marineAnimal = factory.createMarineAnimal();<br>    marineAnimal.show();<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>一个系统要独立于他的产品的创建、组合和表示时</li><li>一个系统要由多个产品系列中的一个来配置时</li><li>当你要强调一个系列相关的产品对象的设计以便进行联合使用</li><li>当你提供一个产品类库，而只想显示他们的接口而不是实现时</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/1.png" alt="github"></p>]]></content>
    
    
    <summary type="html">静态工厂</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-适配器</title>
    <link href="http://example.com/2023/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6/"/>
    <id>http://example.com/2023/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6/</id>
    <published>2023-01-28T23:30:00.000Z</published>
    <updated>2023-02-06T11:48:17.905Z</updated>
    
    <content type="html"><![CDATA[<p>适配器，想到手机充电适配器。<br>为了方便自己的苹果手机和安卓手机能共享一根线，常常会买自带转接头的线，这样就可以不需要第二根线了。</p><p>首先准备充点接口协议，需要那种先，就需要实现那种协议，这和我们平常充电一样。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IphoneLine</span> </span>&#123;<br>    <span class="hljs-comment">// 充电</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AndroidLine</span> </span>&#123;<br>    <span class="hljs-comment">// 充电</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>建立苹果手机，他需要使用苹果线才行<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Iphone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IphoneLine</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;iphone:&quot;</span> + a + <span class="hljs-string">&quot;-&quot;</span> + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>但是我们现在没有苹果充电线，只有安卓充电线。<br>生活中我们回去找找有没有转接头，能够转一下。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AndroidLine</span> </span>&#123;<br>    IphoneLine iphoneLine;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;iphone:&quot;</span> + a + <span class="hljs-string">&quot;-&quot;</span> + b + <span class="hljs-string">&quot;-&quot;</span> + c);<br>        iphoneLine.charging(a, b);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><br>上面代码将适配器实现了安卓线，然后将苹果线组装到该适配器中，这是<code>对象适配器</code>的方式，他依赖于对象组合。 </p><p>而与他对应的<code>类适配器</code>则使用多重继承对一个接口与另一个接口进行匹配。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> DeviceAdapter extends Iphone implements AndroidLine &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">charging</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;iphone:&quot;</span> + a + <span class="hljs-string">&quot;-&quot;</span> + b + <span class="hljs-string">&quot;-&quot;</span> + c);<br>        <span class="hljs-keyword">super</span>.charging(a, b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>想使用一个已经存在的类，而他的接口不符合你的需求。</li><li>想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类协同（即那些接口可能不一定兼容的类）工作。</li><li>（仅适用于对象Adapter）想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配他们的接口。对象适配器可以适配他的父类接口。</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/6.png" alt="github"></p>]]></content>
    
    
    <summary type="html">适配器</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>idea快捷键(mac)-持续更新</title>
    <link href="http://example.com/2023/01/28/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2023/01/28/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2023-01-28T08:02:25.000Z</published>
    <updated>2023-02-02T06:41:45.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">复制</td><td style="text-align:left">cmd + c</td></tr><tr><td style="text-align:left">粘贴</td><td style="text-align:left">cmd + v</td></tr></tbody></table></div><h2 id="二、界面管理"><a href="#二、界面管理" class="headerlink" title="二、界面管理"></a>二、界面管理</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:center">重要性</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">打开<code>project</code>界面</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + 1</td></tr><tr><td style="text-align:left">打开<code>find</code>界面</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + 3</td></tr><tr><td style="text-align:left">打开<code>service</code>界面</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + 8</td></tr><tr><td style="text-align:left">打开<code>get</code>界面</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + 9</td></tr><tr><td style="text-align:left">打开<code>Project Structure</code></td><td style="text-align:center"></td><td style="text-align:left">Cmd + ;;</td></tr><tr><td style="text-align:left">打开<code>terminal</code>界面</td><td style="text-align:center"></td><td style="text-align:left">Opt + F12</td></tr><tr><td style="text-align:left"><code>Generate</code> 界面</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + n</td></tr><tr><td style="text-align:left">tab标签左/右切换</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Shift + [/]</td></tr><tr><td style="text-align:left">跳转到文件展示UI顶部的tab，并打开当前包下所有文件列表</td><td style="text-align:center"></td><td style="text-align:left">Cmd + 上箭头</td></tr><tr><td style="text-align:left">关闭活动的tab页面</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + w</td></tr></tbody></table></div><h2 id="三、代码细节"><a href="#三、代码细节" class="headerlink" title="三、代码细节"></a>三、代码细节</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:center">重要性</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">快速打开光标所在方法、类的定义</td><td style="text-align:center">*</td><td style="text-align:left">Opt + Space</td></tr><tr><td style="text-align:left">光标所在行的头部/尾部</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + 左箭头/右箭头</td></tr><tr><td style="text-align:left">移动代码/代码块</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Shift + 上/下箭头</td></tr><tr><td style="text-align:left">复制当前行，粘贴到下一行</td><td style="text-align:center"></td><td style="text-align:left">Cmd + d</td></tr><tr><td style="text-align:left">在当前行下面增加一行</td><td style="text-align:center"></td><td style="text-align:left">Cmd + Enter</td></tr><tr><td style="text-align:left">删除整行且不留空行</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Back</td></tr><tr><td style="text-align:left">将当前代码块展开 / 折叠</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + -/+</td></tr><tr><td style="text-align:left">将所有代码块展开 / 折叠</td><td style="text-align:center"></td><td style="text-align:left">Cmd + Shift + -/+</td></tr><tr><td style="text-align:left">添加注释和取消注释</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + /</td></tr><tr><td style="text-align:left">添加/取消多行注释</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Shift + /</td></tr><tr><td style="text-align:left">大小写切换</td><td style="text-align:center"></td><td style="text-align:left">Cmd + Shift + u</td></tr><tr><td style="text-align:left">智能选取/取消代码块</td><td style="text-align:center">*</td><td style="text-align:left">Opt + 上/下箭头</td></tr></tbody></table></div><h2 id="四、代码跳转"><a href="#四、代码跳转" class="headerlink" title="四、代码跳转"></a>四、代码跳转</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:center">重要性</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">快速定位到某一行代码</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + l</td></tr><tr><td style="text-align:left">代码浏览记录向后/向前</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + [/]</td></tr><tr><td style="text-align:left">进入光标所在的方法/变量的接口或是定义处</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + b</td></tr><tr><td style="text-align:left">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Opt + b</td></tr></tbody></table></div><h2 id="五、代码重构"><a href="#五、代码重构" class="headerlink" title="五、代码重构"></a>五、代码重构</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:center">重要性</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">重命名</td><td style="text-align:center">*</td><td style="text-align:left">Shift + F6</td></tr><tr><td style="text-align:left">更改函数整体签名</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + F6</td></tr><tr><td style="text-align:left">提取选中代码为方法</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Opt + m</td></tr><tr><td style="text-align:left">提取为变量</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Opt + v</td></tr><tr><td style="text-align:left">提取为类字段</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Opt + f</td></tr><tr><td style="text-align:left">提取为常数</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Opt + c</td></tr><tr><td style="text-align:left">提取为参数</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Opt + p</td></tr></tbody></table></div><h2 id="六、编译运行"><a href="#六、编译运行" class="headerlink" title="六、编译运行"></a>六、编译运行</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:center">重要性</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">编译</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + F9</td></tr><tr><td style="text-align:left">运行代码</td><td style="text-align:center">*</td><td style="text-align:left">Ctrl + r</td></tr><tr><td style="text-align:left">debug运行</td><td style="text-align:center">*</td><td style="text-align:left">Ctrl + d</td></tr><tr><td style="text-align:left">弹出可运行菜单</td><td style="text-align:center"></td><td style="text-align:left">Ctrl + Opt + r</td></tr><tr><td style="text-align:left">弹出可Debug允许菜单</td><td style="text-align:center"></td><td style="text-align:left">Ctrl + Opt + d</td></tr><tr><td style="text-align:left">停止运行</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + F2</td></tr></tbody></table></div><h2 id="七、查找"><a href="#七、查找" class="headerlink" title="七、查找"></a>七、查找</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:center">重要性</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">文件查找</td><td style="text-align:center">*</td><td style="text-align:left">Shift + Shift</td></tr><tr><td style="text-align:left">查找类</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + o</td></tr><tr><td style="text-align:left">当前文件查询</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + f</td></tr><tr><td style="text-align:left">所有文件中根据内容查询</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Shift + f</td></tr><tr><td style="text-align:left">当前文件替换</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + r</td></tr><tr><td style="text-align:left">所有文件中根据内容替换</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Shift + r</td></tr><tr><td style="text-align:left">在文件中查找，下拉选</td><td style="text-align:center">*</td><td style="text-align:left">Cmd + Opt + F7</td></tr><tr><td style="text-align:left">在文件中查找，显示到<code>find</code>中</td><td style="text-align:center">*</td><td style="text-align:left">Opt + F7</td></tr><tr><td style="text-align:left">在文件中标记该参数</td><td style="text-align:center"></td><td style="text-align:left">Cmd + F7</td></tr></tbody></table></div><h2 id="N、其他功能"><a href="#N、其他功能" class="headerlink" title="N、其他功能"></a>N、其他功能</h2><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th><th style="text-align:center">重要性</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">截取全屏/指定大小</td><td style="text-align:center"></td><td style="text-align:left">Cmd + Shift + 3/4</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">idea 快捷键(mac)</summary>
    
    
    
    <category term="快捷键" scheme="http://example.com/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
    <category term="快捷键" scheme="http://example.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-工厂方法</title>
    <link href="http://example.com/2023/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1/"/>
    <id>http://example.com/2023/01/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1/</id>
    <published>2023-01-28T08:02:25.000Z</published>
    <updated>2023-01-31T14:43:07.038Z</updated>
    
    <content type="html"><![CDATA[<p>准备了动物的父类和基本的叫声<code>sing</code>和可以唱歌的方式<code>show</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> String sing;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String sing)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sing = sing;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 抽象方法，用于子类使用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>简单的小狗：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String sing)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(sing);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;dog：&quot;</span>+sing);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>简单的小猫：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String sing)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(sing);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.pringln(<span class="hljs-string">&quot;cat：&quot;</span>+sing);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>当然了，甚至更多…</p><p>这样我们可以尝试让他们出来活动一下:<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Garden</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] arg)</span> </span>&#123;<br>        Animal cat = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;miao~&quot;</span>);<br>        cat.show();<br>        <br>        Animal dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;wang!&quot;</span>);<br>        dog.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>很基础的功能，但是貌似很多重复的代码，当这个逻辑更复杂的时候，重复的代码只会更多。<br>现在来试试工厂开发：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleFactory</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">create</span><span class="hljs-params">(String type, String sing)</span> </span>&#123;<br>        Animal animal = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">switch</span>(type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Dog&quot;</span>:<br>                animal = <span class="hljs-keyword">new</span> Dog(sing);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Cat&quot;</span>:<br>                animal = <span class="hljs-keyword">new</span> Cat(sing);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> animal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>试用一下：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Garden</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] arg)</span> </span>&#123;<br>        SimpleFactory factory = <span class="hljs-keyword">new</span> SimpleFactory();<br>        factory.create(<span class="hljs-string">&quot;Dog&quot;</span>).show();<br>        factory.create(<span class="hljs-string">&quot;Cat&quot;</span>).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>此时这里是一个简单的逻辑优化，如果需要成为设计模式，需要抽象。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Factory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Animal <span class="hljs-title">create</span><span class="hljs-params">(String type, String sing)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>这就是抽象出来的工厂方法。可以让其他工厂来构建类似的功能。是代理者这一信息局部化的时候</p><h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><ol><li>当一个类不知道他所必须创建的对象的类的时候</li><li>当一个类希望由他的子类来指定他所创建的对象的时候</li><li>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类</li></ol><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/DesignPatterns/0.png" alt="github"></p>]]></content>
    
    
    <summary type="html">工厂方法</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>观看Clean Code(整洁代码)记录-1</title>
    <link href="http://example.com/2023/01/28/%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%811/"/>
    <id>http://example.com/2023/01/28/%E9%87%8D%E6%9E%84%E4%BB%A3%E7%A0%811/</id>
    <published>2023-01-28T08:02:25.000Z</published>
    <updated>2023-01-29T10:01:12.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h2 id="规则重要性"><a href="#规则重要性" class="headerlink" title="规则重要性"></a>规则重要性</h2><p><strong>“写代码是非常酷，非常重视的事情，我们做的每一步都可能影响到世界的每一个地方！”</strong><br><strong>“你的代码正在控制整个世界，甚至生命！”</strong><br><strong>“任何事物都会建立规则来约束另一方，而编程也需要建立一套标准来使程序员遵循它！”</strong></p><h2 id="我们为什么这么慢"><a href="#我们为什么这么慢" class="headerlink" title="我们为什么这么慢"></a>我们为什么这么慢</h2><p>在项目开始的初期，获取一个、两个功能会非常的快：<br><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">编码的灵感会从指尖迸发出来，无数的想法都会涌现！<br>同事：你的速度怎么这么快！你真厉害！<br></code></pre></td></tr></table></figure><br>一年后，再次让这个项目组进入并修改功能时：<br><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">抱歉，修改这个功能预计时间是6个月～<br>啊，为什么呢，之前不是很快吗！<br>抱歉，我们很担心，如果我们触及哪怕一行代码，所有的地方都会有问题啊！！！<br>...<br></code></pre></td></tr></table></figure></p><p>当我们前期追求速度时，如果没有规范，则会越来越混乱，这个过程可能很长。但是到了后面则会出现无法交付的情况，因为你想要修改某些功能时哪怕是<strong>1%</strong>也需要消耗数倍的开发时间。但是我们都知道项目经理在外的宣称完成时间肯定是更短，6个月是不可能宣称的时间。<br>增加一倍的工作人员？当你增加新人时，只会在前期的工程时间延长。因为他们需要融入这个项目。<br>给他们培训？那谁来给他们培训呢，首先是制造这场混乱的人，这个说法不准确，培养新人的不是旧人，而是旧代码。当新人进入这个火坑中，为了能够迅速找到问题，他们会去翻阅旧代码，了解之后就会效仿这些旧代码，让这个火坑继续恶化，混乱。</p><p>如果代码得以整洁有序，至少不会乱成一锅粥。而这一基础就需要我们走的慢一点，稳一点；快会让思维变得混乱，因为我们需要尽快完成任务。<br><figure class="highlight d"><table><tr><td class="code"><pre><code class="hljs d">当我们在<span class="hljs-keyword">debug</span>的时候，测试，<span class="hljs-keyword">debug</span>在断点中跳跃，突然成功了，好了任务完成！<br>...<br></code></pre></td></tr></table></figure><br>但是这项工作只完成了一半，此时这项任务只是被胶带和铁丝捆绑后的半成品，你需要将它整理一下。</p><h2 id="什么是代码整洁"><a href="#什么是代码整洁" class="headerlink" title="什么是代码整洁"></a>什么是代码整洁</h2><p><strong>“我喜欢我的代码是优雅和高效的，整洁就意味着只做一件事”</strong><br><strong>“整洁的代码是简单和直接的，读起来像写的很好的散文”</strong><br><strong>“整洁的代码看起来总是由一个关心的人写的，这是一个多么可爱的声明”</strong></p><p>代码完成功能只是一半，能让他人看懂的代码更重要。</p><p>整洁的代码是在你看代码是，他的每一个功能都是没有惊喜的，都是你意料之中的。</p><h2 id="二、代码对比效果"><a href="#二、代码对比效果" class="headerlink" title="二、代码对比效果"></a>二、代码对比效果</h2><p>代码一：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">testableHtml</span> <span class="hljs-params">(PageData pageData, <span class="hljs-keyword">boolean</span> includeSuiteSetup)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    WikiPage wikiPage = pageData.getWikiPage();<br>    StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();<br>    <span class="hljs-keyword">if</span> (pageData.hasAttribute(<span class="hljs-string">&quot;Test&quot;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (includeSuiteSetup) &#123;<br>            WikiPage suiteSetup = <br>                PageCrawlerImpl.getInheritedPage(<br>                    SuiteResponder.SUITE_SETUP_NAME, wikiPage<br>                );<br>            <span class="hljs-keyword">if</span> (suiteSetup != <span class="hljs-keyword">null</span>) &#123;<br>                WikiPagePath pagePath = <br>                    suiteSetup.getPageCrawler().getFullPath(suiteSetup);<br>                String pagePathName = PathParser.render(pagePath);<br>                buffer.append(<span class="hljs-string">&quot;!include -setup .&quot;</span>)<br>                    .append(pagePathName)<br>                    .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        WikiPage setup = <br>            PageCrawlerImpl.getInheritedPage(<span class="hljs-string">&quot;SetUp&quot;</span>, wikiPage);<br>        <span class="hljs-keyword">if</span> (setup != <span class="hljs-keyword">null</span>) &#123;<br>            WikiPagePath setupPath = <br>                wikiPage.getPageCrawler().getFullPath(setup);<br>            String setupPathName = PathParser.render(setupPath);<br>            buffer.append(<span class="hljs-string">&quot;!include -setup .&quot;</span>)<br>                .append(setupPathName)<br>                .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    buffer.append(pageData.getContent());<br>    <span class="hljs-keyword">if</span> (pageData.hasAttribute(<span class="hljs-string">&quot;Test&quot;</span>)) &#123;<br>        WikiPage teardown = <br>            PageCrawlerImpl.getInheritedPage(<span class="hljs-string">&quot;TearDown&quot;</span>, wikiPage);<br>        <span class="hljs-keyword">if</span> (teardown != <span class="hljs-keyword">null</span>) &#123;<br>            WikiPagePath tearDownPath = <br>                wikiPage.getPageCrawler().getFullPath(teardown);<br>            String tearDownPathName = PathParser.render(tearDownPath);<br>            buffer.append(<span class="hljs-string">&quot;\n&quot;</span>)<br>                .append(<span class="hljs-string">&quot;!include -teardown .&quot;</span>)<br>                .append(tearDownPathName)<br>                .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (includeSuiteSetup) &#123;<br>            WikiPage suiteTeardownp = <br>                PageCrawlerImpl.getInheritedPage(<br>                    SuiteResponder.SUITE_TEARDOWN_NAME, wikiPage<br>                );<br>            <span class="hljs-keyword">if</span> (suitTeardown != <span class="hljs-keyword">null</span>) &#123;<br>                WikiPagePath pagePath = <br>                    wikiPage.getPageCrawler().getFullPath(suiteTeardown);<br>                String pagePathName = PathParser.render(pagePath);<br>                buffer.append(<span class="hljs-string">&quot;!include -teardown .&quot;</span>)<br>                    .append(pagePathName)<br>                    .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    pageData.setContent(buffer.toString());<br>    <span class="hljs-keyword">return</span> pageData.getHtml();<br>&#125;<br></code></pre></td></tr></table></figure><br>在抽象区和抽象区之间不建议跨越过大。因为在编码过程中思维的如此上下跨越，但是如此却让阅读思维混乱。</p><p>代码二：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">renderPageWithSetupAndTeardowns</span> <span class="hljs-params">(PageData pageData, <span class="hljs-keyword">boolean</span> isSuite)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">boolean</span> isTestPage = pageData.hasAttribute(<span class="hljs-string">&quot;Test&quot;</span>);<br>    <span class="hljs-keyword">if</span> (isTestPage) &#123;<br>        WikiPage testPage = pageData.getWikiPage();<br>        StringBuffer newPageContent = <span class="hljs-keyword">new</span> StringBuffer();<br>        includeSetupPages(testPage, newPageContent, isSuite);<br>        newPageContent.append(pageData.getContent());<br>        includeTeardownPages(testPage, newPageContent, isSuite);<br>        pageData.setContent(newPageContent.toString());<br>    &#125;<br>    <span class="hljs-keyword">return</span> pageData.getHtml();<br>&#125;<br></code></pre></td></tr></table></figure></p><p>代码三：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">renderPageWithSetupAndTeardowns</span> <span class="hljs-params">(PageData pageData, <span class="hljs-keyword">boolean</span> isSuite)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (isTestPage(pageData))<br>        includeSetupAndTeardownPages(pageData, isSuite);<br>    <span class="hljs-keyword">return</span> pageData.getHtml();<br>&#125;<br></code></pre></td></tr></table></figure><br>虽然看不到其他细节部分，但是他给予了我们一个功能的大纲或者介绍，告诉我们他的大致功能可能是什么，细节则在被封装的函数中。两者的区别体现了抽象层的高低。<br><strong>函数的规模应该限定为只做一件事情，这是因为你可以有意义的提取一件事情</strong>，但是在被无数次提取函数所形成函数海洋后，我们并不会被他所淹没，因为这是函数名称和对象需要区分的事情。<br><img src="/img/CleanCode/0.png" alt="github"><br>上面的代码将近<code>3000行</code>，并且他都是为了完成一个事情，虽然这方面有点主观意愿，但是它确实是只完成一件事情。<br><img src="/img/CleanCode/1.png" alt="github"><br>此时，将他们提取成<code>Class，类</code>，貌似更合理。</p><h2 id="三、简单的规则介绍"><a href="#三、简单的规则介绍" class="headerlink" title="三、简单的规则介绍"></a>三、简单的规则介绍</h2><p>在函数构建过程中，函数名的规则非常重要，函数的参数最好不要超过三个，如果参数非常具有凝聚力以至于他们必须用到，那就封装成类。在传参类型中，不建议使用<code>boolean</code>类型，因为在使用boolean类型后，你一定会在函数中使用这个boolean类型来做判断，即<code>if</code>，既然如此，为什么不建立两个函数，而这个boolean类型的抽象层就在调用函数那边来处理。</p><p>尽量避免<code>Switch</code>语句：</p><ol><li>当我们针对switch的判断类型增加一个新类型对象时，我们必须要翻阅整个代码，将所有的switch补齐。</li><li>当我们针对switch代码修改时，需要编译一整套代码。（jar文件，一个运行时的链接加载器）</li></ol><p>多态是解决多类型处理的方案。（开闭原则：一个系统，一个模块应对扩展开放，但对修改关闭，你应该能够扩展一个模块的行为，而不需要修改该模块。）</p><p>副作用：副作用的经典定义是对系统状态的改变，如果调用了一个函数，而该函数对系统状态发生变化，那么这个函数有一个副作用。例如打开文件的open函数使系统给予了一个可配置内存块。<br>副作用一般是成对出现，开和关，获取和释放。让我们无需管理他的技术是垃圾回收，但是他是一根拐杖，很多不合理方面，因为我们没有以一种合理的方式编写代码。但是他依旧给了我们更安全的编码体验。<br>副作用函数会给我们直接的体验就是，某些时候两个函数可能因为某些原因顺序必须保持如此否则就会<code>内存泄漏</code>。<br>建议在使用副作用函数时返回void，而无副作用函数则使用带返回值，这样可以让我们更轻易理解。</p><p>使用一个异常比返回一个错误代码更好（java带异常处理），<code>try</code>代码块只做一件事情，就是验证函数是否会有异常问题，不建议在<code>try</code>代码块中添加其他的代码，这只会增加阅读时的理解时间。</p><p>尽量避免重复代码。</p><p>结构化编程，每一种算法都可以由三种结构组成：序列、判断和迭代。</p><p>测试代码的重要性。</p><p>注释：解释代码。注释是在名称限制时会使用的解释方案，但如今丰富的命名方案，可以完成代码自解释。<br>当我们完成第一次注释后，可能再也不会去维护这个注释，一方面注释可以帮我们理解代码，但是相反的，注释可能会让我们误解代码。注释的正确使用是为了弥补我们在代码中的表达失败，在我们可以用代码表达的范围中，我们不需要注释。<br>但是我们很多时候确实无法在代码中表达作者的思路和想法，因为未能很好的使用代码表达自己，是一种失败。<br>大多数人并不会写错误的注释，但是注释会随着时间的推移而退化。因此更希望我们的注释代码颜色，更贴近ide背景色，这样他们更具有忽略性，<code>请多注视代码，如果无法理解，再看看我们</code>。注释无法遮挡失败的代码。<br>对比代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// check to see if the employee is eligible for full benefits</span><br><span class="hljs-keyword">if</span> (((employee.flags &amp; HOURLY_FLAG) &gt; <span class="hljs-number">0</span>) &amp;&amp; (employee.age &gt; <span class="hljs-number">65</span>)) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><br>和<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (employee.isEligibleForFullBenefits()) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>另外在使用<code>TODO</code>注释时也需要注意，同注释一样，他更想表明一点，此处功能的不同处，但是也会出现上述特点，并加重其味道。</p><p>不要注释代码，并将它发不到生产环境中。</p><p>JavaDoc在对外提供接口是非常不错的选择，但是如果只是内部开发，则无任何意义。</p><p>命名规范：<br>变量名称应该与包含他的作用域的大小成正比。<br>函数名称应该与包含他的作用域的大小成反比。<br>类名的大小与包含他的作用域大小成反比。<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-keyword">int</span>[]&gt; getThem() &#123;<br>    List&lt;<span class="hljs-keyword">int</span>[]&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] x : gameBoard)<br>        <span class="hljs-keyword">if</span> (cell[<span class="hljs-number">0</span>] == <span class="hljs-number">4</span>)<br>            list1.add(cell);<br>    <span class="hljs-keyword">return</span> list1;<br>&#125;<br></code></pre></td></tr></table></figure><br>对比<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-keyword">int</span>[]&gt; getFlaggedCells() &#123;<br>    List&lt;<span class="hljs-keyword">int</span>[]&gt; flaggedCells = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] cell : gameBoard)<br>        <span class="hljs-keyword">if</span> (cell[STATUS_VALUE] == FLAGGED)<br>            flaggedCells.add(cell);<br>    <span class="hljs-keyword">return</span> flaggedCells;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在命名时很容易出现非常大的歧义：<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function">Account <span class="hljs-title">getActiveAccount</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">getActiveAccounts</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">getActiveAccountInfo</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></p><h2 id="四、我就是你的新CTO"><a href="#四、我就是你的新CTO" class="headerlink" title="四、我就是你的新CTO"></a>四、我就是你的新CTO</h2><p>我希望你在发布代码时，你知道他的作用，你会在能力范围内确定他是有效的，而不是靠猜。</p><ul><li>具有稳定的生产力。</li><li>让系统廉价的适应性。</li><li>持续改进</li><li>无畏的能力</li><li>最高质量</li><li>让测试一无所获</li><li>自动化测试</li><li>团队中人员互相引领（其中正确的结对编程，可以有效的减少信息孤岛的形成）</li><li>诚实的估计（不要吸收预估风险）</li><li>学会说”不”</li><li>测试驱动开发<ol><li>在你完成一个失败的测试前，你不允许写任何生产代码</li><li>你不允许写出更多的足以失败(无法编译)的测试内容</li><li>你不允许再编写任何足以通过当前失败测试的生产代码</li></ol></li></ul>]]></content>
    
    
    <summary type="html">整洁代码</summary>
    
    
    
    <category term="整洁代码" scheme="http://example.com/categories/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="整洁代码" scheme="http://example.com/tags/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>eclipse-mac-err</title>
    <link href="http://example.com/2022/09/27/eclipse-mac-err/"/>
    <id>http://example.com/2022/09/27/eclipse-mac-err/</id>
    <published>2022-09-27T22:24:54.000Z</published>
    <updated>2022-09-27T14:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>打开eclipse时提示报错信息应用程序”Eclipse.app”无法打开（这里忘了截图就不上图了）。</p><p>点击 “好” 的按钮后会弹出发送报告的弹窗，这里不要着急关闭弹窗，点开显示详细信息，查看一下异常退出原因。以下是我遇到的问题时的报告详情：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Process:</span>               <span class="hljs-string">eclipse</span> [<span class="hljs-number">2154</span>]<br><span class="hljs-attr">Path:</span>                  <span class="hljs-string">/Applications/Eclipse.app/Contents/MacOS/eclipse</span><br><span class="hljs-attr">Identifier:</span>            <span class="hljs-string">org.eclipse.platform.ide</span><br><span class="hljs-attr">Version:</span>               <span class="hljs-string">???</span><br><span class="hljs-attr">Code Type:</span>             <span class="hljs-string">X86-64</span> <span class="hljs-string">(Native)</span><br><span class="hljs-attr">Parent Process:</span>        <span class="hljs-string">???</span> [<span class="hljs-number">1</span>]<br><span class="hljs-attr">Responsible:</span>           <span class="hljs-string">eclipse</span> [<span class="hljs-number">2154</span>]<br><span class="hljs-attr">User ID:</span>               <span class="hljs-number">501</span><br> <br><span class="hljs-attr">Date/Time:</span>             <span class="hljs-number">2021-11-15 10:13:17.251</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">OS Version:</span>            <span class="hljs-string">Mac</span> <span class="hljs-string">OS</span> <span class="hljs-string">X</span> <span class="hljs-number">10.15</span><span class="hljs-number">.5</span> <span class="hljs-string">(19F96)</span><br><span class="hljs-attr">Report Version:</span>        <span class="hljs-number">12</span><br><span class="hljs-attr">Anonymous UUID:</span>        <span class="hljs-string">E0D919E5-E42C-F4A5-EEB1-651A6B2C547D</span><br> <br> <br><span class="hljs-attr">Time Awake Since Boot:</span> <span class="hljs-number">1700 </span><span class="hljs-string">seconds</span><br> <br><span class="hljs-attr">System Integrity Protection:</span> <span class="hljs-string">enabled</span><br> <br><span class="hljs-attr">Crashed Thread:</span>        <span class="hljs-number">0</span><br> <br><span class="hljs-attr">Exception Type:</span>        <span class="hljs-string">EXC_CRASH</span> <span class="hljs-string">(Code</span> <span class="hljs-string">Signature</span> <span class="hljs-string">Invalid)</span><br><span class="hljs-attr">Exception Codes:</span>       <span class="hljs-number">0x0000000000000000</span><span class="hljs-string">,</span> <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-attr">Exception Note:</span>        <span class="hljs-string">EXC_CORPSE_NOTIFY</span><br> <br><span class="hljs-attr">Termination Reason:</span>    <span class="hljs-string">Namespace</span> <span class="hljs-string">CODESIGNING,</span> <span class="hljs-string">Code</span> <span class="hljs-number">0x1</span><br> <br><span class="hljs-attr">kernel messages:</span><br> <br><span class="hljs-string">VM</span> <span class="hljs-string">Regions</span> <span class="hljs-string">Near</span> <span class="hljs-number">0</span> <span class="hljs-string">(cr2):</span><br><span class="hljs-string">--&gt;</span> <br>    <span class="hljs-string">__TEXT</span>                 <span class="hljs-string">000000000b937000-000000000b93b000</span> [   <span class="hljs-string">16K</span>] <span class="hljs-string">r-x/r-x</span> <span class="hljs-string">SM=COW</span>  <br> <br><span class="hljs-attr">Thread 0 Crashed:</span><br><span class="hljs-number">0</span>   <span class="hljs-string">???</span>                           <span class="hljs-number">0x000000000c963000</span> <span class="hljs-string">_dyld_start</span> <span class="hljs-string">+</span> <span class="hljs-number">0</span><br> <br><span class="hljs-string">Thread</span> <span class="hljs-number">0</span> <span class="hljs-string">crashed</span> <span class="hljs-string">with</span> <span class="hljs-string">X86</span> <span class="hljs-string">Thread</span> <span class="hljs-string">State</span> <span class="hljs-string">(64-bit):</span><br>  <span class="hljs-attr">rax: 0x0000000000000000  rbx: 0x0000000000000000  rcx: 0x0000000000000000  rdx:</span> <span class="hljs-number">0x0000000000000000</span><br>  <span class="hljs-attr">rdi: 0x0000000000000000  rsi: 0x0000000000000000  rbp: 0x0000000000000000  rsp:</span> <span class="hljs-number">0x00007ffee42ccc50</span><br>   <span class="hljs-attr">r8: 0x0000000000000000   r9: 0x0000000000000000  r10: 0x0000000000000000  r11:</span> <span class="hljs-number">0x0000000000000000</span><br>  <span class="hljs-attr">r12: 0x0000000000000000  r13: 0x0000000000000000  r14: 0x0000000000000000  r15:</span> <span class="hljs-number">0x0000000000000000</span><br>  <span class="hljs-attr">rip: 0x000000000c963000  rfl: 0x0000000000000200  cr2:</span> <span class="hljs-number">0x0000000000000000</span><br>  <br><span class="hljs-attr">Logical CPU:</span>     <span class="hljs-number">0</span><br><span class="hljs-attr">Error Code:</span>      <span class="hljs-number">0x00000000</span><br><span class="hljs-attr">Trap Number:</span>     <span class="hljs-number">0</span><br> <br> <br><span class="hljs-attr">Binary Images:</span><br>         <span class="hljs-number">0xb937000</span> <span class="hljs-bullet">-</span>          <span class="hljs-number">0xb93aff7</span> <span class="hljs-string">+???</span> <span class="hljs-string">(0)</span> <span class="hljs-string">&lt;BF0BAA93-FE7A-3039-AC22-E0007DC821F4&gt;</span> <span class="hljs-string">(null)</span><br>         <span class="hljs-number">0xc962000</span> <span class="hljs-bullet">-</span>          <span class="hljs-number">0xc9f3eff</span> <span class="hljs-string">+???</span> <span class="hljs-string">(750.5)</span> <span class="hljs-string">&lt;26346F4C-B18E-31A1-9964-30736214F1BF&gt;</span> <span class="hljs-string">(null)</span><br> <br><span class="hljs-attr">External Modification Summary:</span><br>  <span class="hljs-attr">Calls made by other processes targeting this process:</span><br>    <span class="hljs-attr">task_for_pid:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">thread_create:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">thread_set_state:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">Calls made by this process:</span><br>    <span class="hljs-attr">task_for_pid:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">thread_create:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">thread_set_state:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">Calls made by all processes on this machine:</span><br>    <span class="hljs-attr">task_for_pid:</span> <span class="hljs-number">78635</span><br>    <span class="hljs-attr">thread_create:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">thread_set_state:</span> <span class="hljs-number">0</span><br> <br><span class="hljs-attr">VM Region Summary:</span><br><span class="hljs-attr">ReadOnly portion of Libraries:</span> <span class="hljs-string">Total=852K</span> <span class="hljs-string">resident=0K(0%)</span> <span class="hljs-string">swapped_out_or_unallocated=852K(100%)</span><br><span class="hljs-attr">Writable regions:</span> <span class="hljs-string">Total=8404K</span> <span class="hljs-string">written=0K(0%)</span> <span class="hljs-string">resident=0K(0%)</span> <span class="hljs-string">swapped_out=0K(0%)</span> <span class="hljs-string">unallocated=8404K(100%)</span><br> <br>                                <span class="hljs-string">VIRTUAL</span>   <span class="hljs-string">REGION</span> <br><span class="hljs-string">REGION</span> <span class="hljs-string">TYPE</span>                        <span class="hljs-string">SIZE</span>    <span class="hljs-string">COUNT</span> <span class="hljs-string">(non-coalesced)</span> <br><span class="hljs-string">===========</span>                     <span class="hljs-string">=======</span>  <span class="hljs-string">=======</span> <br><span class="hljs-string">STACK</span> <span class="hljs-string">GUARD</span>                       <span class="hljs-number">56.</span><span class="hljs-string">0M</span>        <span class="hljs-number">1</span> <br><span class="hljs-string">Stack</span>                             <span class="hljs-string">8192K</span>        <span class="hljs-number">1</span> <br><span class="hljs-string">__DATA</span>                             <span class="hljs-string">232K</span>        <span class="hljs-number">3</span> <br><span class="hljs-string">__DATA_CONST</span>                        <span class="hljs-string">20K</span>        <span class="hljs-number">1</span> <br><span class="hljs-string">__LINKEDIT</span>                         <span class="hljs-string">252K</span>        <span class="hljs-number">2</span> <br><span class="hljs-string">__TEXT</span>                             <span class="hljs-string">600K</span>        <span class="hljs-number">2</span> <br><span class="hljs-string">shared</span> <span class="hljs-string">memory</span>                        <span class="hljs-string">8K</span>        <span class="hljs-number">2</span> <br><span class="hljs-string">===========</span>                     <span class="hljs-string">=======</span>  <span class="hljs-string">=======</span> <br><span class="hljs-string">TOTAL</span>                             <span class="hljs-number">65.</span><span class="hljs-string">1M</span>       <span class="hljs-number">12</span> <br> <br><span class="hljs-attr">Model:</span> <span class="hljs-string">MacBookPro14,1,</span> <span class="hljs-string">BootROM</span> <span class="hljs-number">428.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">,</span> <span class="hljs-number">2</span> <span class="hljs-string">processors,</span> <span class="hljs-string">Dual-Core</span> <span class="hljs-string">Intel</span> <span class="hljs-string">Core</span> <span class="hljs-string">i7,</span> <span class="hljs-number">2.5</span> <span class="hljs-string">GHz,</span> <span class="hljs-number">16</span> <span class="hljs-string">GB,</span> <span class="hljs-string">SMC</span> <span class="hljs-number">2.</span><span class="hljs-string">43f10</span><br><span class="hljs-attr">Graphics:</span> <span class="hljs-string">kHW_IntelIrisGraphics640Item,</span> <span class="hljs-string">Intel</span> <span class="hljs-string">Iris</span> <span class="hljs-string">Plus</span> <span class="hljs-string">Graphics</span> <span class="hljs-number">640</span><span class="hljs-string">,</span> <span class="hljs-string">spdisplays_builtin</span><br><span class="hljs-attr">Memory Module:</span> <span class="hljs-string">BANK</span> <span class="hljs-number">0</span><span class="hljs-string">/DIMM0,</span> <span class="hljs-number">8</span> <span class="hljs-string">GB,</span> <span class="hljs-string">LPDDR3,</span> <span class="hljs-number">2133 </span><span class="hljs-string">MHz,</span> <span class="hljs-number">0x802C</span><span class="hljs-string">,</span> <span class="hljs-number">0x4D5435324C31473332443450472D30393320</span><br><span class="hljs-attr">Memory Module:</span> <span class="hljs-string">BANK</span> <span class="hljs-number">1</span><span class="hljs-string">/DIMM0,</span> <span class="hljs-number">8</span> <span class="hljs-string">GB,</span> <span class="hljs-string">LPDDR3,</span> <span class="hljs-number">2133 </span><span class="hljs-string">MHz,</span> <span class="hljs-number">0x802C</span><span class="hljs-string">,</span> <span class="hljs-number">0x4D5435324C31473332443450472D30393320</span><br><span class="hljs-attr">AirPort:</span> <span class="hljs-string">spairport_wireless_card_type_airport_extreme</span> <span class="hljs-string">(0x14E4,</span> <span class="hljs-number">0x170</span><span class="hljs-string">),</span> <span class="hljs-string">Broadcom</span> <span class="hljs-string">BCM43xx</span> <span class="hljs-number">1.0</span> <span class="hljs-string">(7.77.111.1</span> <span class="hljs-string">AirPortDriverBrcmNIC-1610.1)</span><br><span class="hljs-attr">Bluetooth:</span> <span class="hljs-string">Version</span> <span class="hljs-number">7.0</span><span class="hljs-string">.5f6,</span> <span class="hljs-number">3</span> <span class="hljs-string">services,</span> <span class="hljs-number">27</span> <span class="hljs-string">devices,</span> <span class="hljs-number">1</span> <span class="hljs-string">incoming</span> <span class="hljs-string">serial</span> <span class="hljs-string">ports</span><br><span class="hljs-attr">Network Service:</span> <span class="hljs-string">Wi-Fi,</span> <span class="hljs-string">AirPort,</span> <span class="hljs-string">en0</span><br><span class="hljs-attr">USB Device:</span> <span class="hljs-string">USB</span> <span class="hljs-number">3.0</span> <span class="hljs-string">Bus</span><br><span class="hljs-attr">Thunderbolt Bus:</span> <span class="hljs-string">MacBook</span> <span class="hljs-string">Pro,</span> <span class="hljs-string">Apple</span> <span class="hljs-string">Inc.,</span> <span class="hljs-number">41.4</span><br></code></pre></td></tr></table></figure><br>该问题是权限不足问题</p><p>使用如下命令进行修复：<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">sudo codesign <span class="hljs-params">--force</span> <span class="hljs-params">--deep</span> <span class="hljs-params">--sign</span> - <span class="hljs-string">/Applications/Eclipse.app</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">在mac中打开eclipse提示错误</summary>
    
    
    
    <category term="异常问题" scheme="http://example.com/categories/%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="异常问题" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>流程引擎-activiti7</title>
    <link href="http://example.com/2022/09/16/activiti7/"/>
    <id>http://example.com/2022/09/16/activiti7/</id>
    <published>2022-09-16T10:01:11.000Z</published>
    <updated>2023-01-28T08:07:37.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、BPMN2-0"><a href="#一、BPMN2-0" class="headerlink" title="一、BPMN2.0"></a>一、BPMN2.0</h2><p>BPMN2.0（Business Process Model And Notation，业务流程模型和符号），是一种业务流程建模规范，提供了一套对业务流程建模的标记语言。起初由BPMI（The Business Process Management Initiative）在2004年推出BPMN1.0版本，后BPMI并入到OMG组织，OMG于2011年推出BPMN2.0标准。BPMN的主要目标是提供一套被所有业务用户容易理解和使用的标准符号，利用这些符号将业务流程建模简单化、图形化，将复杂的建模过程视觉化，让业务建模者、业务实施人员、管理监督人员对BPMN描述的业务流程有一个更加清晰明了的认识。从业务流程建模分析到流程的实现，直到最终用户的管理监控，BPMN2.0都贯穿其中。可以说BPMN在业务流程设计（业务流程图）与流程实现（工作流引擎）之间搭建了一条标准化的桥梁。</p><p>一句话BPMN2.0帮助我们规范的画流程图。</p><h1 id="1-1-BPMN2-0规范的基础元素"><a href="#1-1-BPMN2-0规范的基础元素" class="headerlink" title="1.1 BPMN2.0规范的基础元素"></a>1.1 BPMN2.0规范的基础元素</h1><h2 id="1-1-1-流对象（Flow-Objects）"><a href="#1-1-1-流对象（Flow-Objects）" class="headerlink" title="1.1.1 流对象（Flow Objects）"></a>1.1.1 流对象（Flow Objects）</h2><p>包括事件、活动、网关，是BPMN中的核心元素。</p><h3 id="1-事件"><a href="#1-事件" class="headerlink" title="1. 事件"></a>1. 事件</h3><p>用于对流程生命周期中发生的事件进行建模。</p><h5 id="开始事件-开始事件指示流程从何处开始"><a href="#开始事件-开始事件指示流程从何处开始" class="headerlink" title="开始事件:开始事件指示流程从何处开始"></a>开始事件:开始事件指示流程从何处开始</h5><p>定义：没有启动事件，需要调用startProcessInstanceByXXX方法执行该空开始事件。<br><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;startEvent <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;my start event&quot;</span> /&gt;<br></code></pre></td></tr></table></figure></p><h5 id="中间事件"><a href="#中间事件" class="headerlink" title="中间事件"></a>中间事件</h5><h5 id="结束事件-标志着流程的结束"><a href="#结束事件-标志着流程的结束" class="headerlink" title="结束事件:标志着流程的结束"></a>结束事件:标志着流程的结束</h5><p>定义：没有结束事件，当流程引擎检测到执行到该空结束事件时会自动执行，已结束整个流程。<br><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;endEvent <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;end&quot;</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;my end event&quot;</span> /&gt;<br></code></pre></td></tr></table></figure></p><h5 id="边界事件"><a href="#边界事件" class="headerlink" title="边界事件"></a>边界事件</h5><h3 id="2-活动-任务"><a href="#2-活动-任务" class="headerlink" title="2. 活动(任务)"></a>2. 活动(任务)</h3><p>定义：任务表示流程中具体要做的事情，通常一个任务表示工作需要被外部实体完成，比如人工任务和自动服务。</p><p>图形表示：任务通常有圆角矩形表示，内部文字为任务名称或描述，左上角的图标表示任务类型。</p><h5 id="人工任务-user-task"><a href="#人工任务-user-task" class="headerlink" title="人工任务(user task)"></a>人工任务(user task)</h5><p>定义：最典型的任务。需要由人工来完成的任务，比如请假审批、财务审核等。</p><p>id是必须的，name是可选的，通过documentation元素对任务进行描述。任何bpmn2.0元素都可用documentation元素进行描述。</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">userTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;theTask&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Schedule meeting&quot;</span> &gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">documentation</span>&gt;</span> Schedule an engineering meeting for next week with the new hire. <span class="hljs-tag">&lt;/<span class="hljs-name">documentation</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">userTask</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可通过dueDate字段设置任务的到期时间。</p><p>人工任务可分配给三种人：assignee（办理人、受让人），candidate(候选人)，candidateGroup(候选人组)</p><ul><li>assignee是任务的实际办理人，任务只能同时有一个办理人。</li><li>任务可以有多个候选人，每个候选人都能看到该任务，候选人需要claim(拾取)任务成为assignee后，才能进行任务的办理，任务被拾取后其他候选人就看不到该任务了。候选人在拾取任务后可以unclaim，将任务归还，此时其他候选人可以看到并claim任务。</li><li>不想单独指定多个候选人，可以指定一个候选人组，一般为角色ID。</li></ul><p>分配方式有三种：</p><ul><li>画图时写死。</li><li>通过UEL表达式动态设置。</li><li>通过TaskListener监听器指定。</li></ul><h5 id="java服务任务-service-task"><a href="#java服务任务-service-task" class="headerlink" title="java服务任务(service task)"></a>java服务任务(service task)</h5><p>定义：用于调用外部Java代码。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;serviceTask <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;javaService&quot;</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;My Java Service Task&quot;</span> activiti:<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;org.activiti.MyJavaDelegate&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h5 id="脚本任务-script-task"><a href="#脚本任务-script-task" class="headerlink" title="脚本任务(script task)"></a>脚本任务(script task)</h5><p>定义：用于执行脚本文件(如javascript)</p><figure class="highlight dust"><table><tr><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scriptTask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;theScriptTask&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute script&quot;</span> <span class="hljs-attr">scriptFormat</span>=<span class="hljs-string">&quot;groovy&quot;</span>&gt;</span> </span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> </span><br><span class="xml">      sum = 0 </span><br><span class="xml">      for ( i in inputArray ) </span><span class="hljs-template-variable">&#123; </span><br><span class="hljs-template-variable">          sum += i </span><br><span class="hljs-template-variable">      &#125;</span><span class="xml"> </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">scriptTask</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="web服务任务"><a href="#web服务任务" class="headerlink" title="web服务任务"></a>web服务任务</h5><p>定义：用于调用外部web接口服务。</p><h5 id="邮件任务-acticiti专有，非BPMN2-0规范"><a href="#邮件任务-acticiti专有，非BPMN2-0规范" class="headerlink" title="邮件任务(acticiti专有，非BPMN2.0规范)"></a>邮件任务(acticiti专有，非BPMN2.0规范)</h5><p>定义：用于发送邮件。</p><h3 id="3-网关-节点"><a href="#3-网关-节点" class="headerlink" title="3. 网关(节点)"></a>3. 网关(节点)</h3><p>作用：用来控制流程的流向。<br>图形表示：网关通常以菱形图形表示，内部带有一个图标。该图标显示网关的类型。</p><h5 id="排他网关-exclusiveGateway"><a href="#排他网关-exclusiveGateway" class="headerlink" title="排他网关(exclusiveGateway)"></a>排他网关(exclusiveGateway)</h5><p>定义：也叫XOR网关，对所有的传出分支进行条件判断，仅选择一个条件为true的分支执行，当有多个分支条件满足时，默认执行xml中定义的第一个。若多个分支条件都不满足时，就走默认顺序流。如果没有默认顺序流，将抛出异常。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;exclusiveGateway <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;exclusiveGw&quot;</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;Exclusive Gateway&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h5 id="并行网关-parallelGateway"><a href="#并行网关-parallelGateway" class="headerlink" title="并行网关(parallelGateway)"></a>并行网关(parallelGateway)</h5><p>定义：并行网关模拟多个同时并行执行的流程这种情况。<br>特点：</p><ol><li>具有fork-join行为(发散和汇聚,想起了java中的fork-join线程框架)，即从并行网关传出的流程会并行执行，传入并行网关的流程会进入里面等待，知道并行的流程都进入到并行网关后，再一起发散出去。</li><li>并行网关忽略分支的条件判断。</li></ol><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;parallelGateway <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myParallelGateway&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h5 id="包含网关-inclusiveGateway"><a href="#包含网关-inclusiveGateway" class="headerlink" title="包含网关(inclusiveGateway)"></a>包含网关(inclusiveGateway)</h5><p>定义：看作是排他网关和并行网关的组合，包含网关既能进行条件判断，又能并行执行多个分支。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;inclusiveGateway <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myInclusiveGateway&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="1-1-2-顺序流"><a href="#1-1-2-顺序流" class="headerlink" title="1.1.2 顺序流"></a>1.1.2 顺序流</h2><p>定义：顺序流就是事件，活动和网关之间的连线，显示为一条实线 带有箭头，在BPMN图形中每个顺序流都有一个源头和一个 目标引用，包含了 活动，事件或网关的id。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;sequenceFlow <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;myFlow&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;MyFlow&quot;</span> <span class="hljs-attribute">sourceRef</span>=<span class="hljs-string">&quot;sourceId&quot;</span> <span class="hljs-attribute">targetRef</span>=<span class="hljs-string">&quot;targetId&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h3 id="1-条件顺序流"><a href="#1-条件顺序流" class="headerlink" title="1. 条件顺序流"></a>1. 条件顺序流</h3><p>定义：给顺序流添加表达式条件，当条件判断为true时，该顺序流将会被执行。这意味着如果多个顺序流的条件都为true时，会有多个顺序流并行执行。</p><h3 id="2-默认顺序流"><a href="#2-默认顺序流" class="headerlink" title="2. 默认顺序流"></a>2. 默认顺序流</h3><h2 id="1-1-3-泳道（Swimlanes）"><a href="#1-1-3-泳道（Swimlanes）" class="headerlink" title="1.1.3 泳道（Swimlanes）"></a>1.1.3 泳道（Swimlanes）</h2><h2 id="1-1-4-人工产物"><a href="#1-1-4-人工产物" class="headerlink" title="1.1.4 人工产物"></a>1.1.4 人工产物</h2>]]></content>
    
    
    <summary type="html">流程引擎</summary>
    
    
    
    <category term="流程引擎" scheme="http://example.com/categories/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="流程引擎" scheme="http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>配置seate</title>
    <link href="http://example.com/2022/09/04/seate/"/>
    <id>http://example.com/2022/09/04/seate/</id>
    <published>2022-09-04T19:11:24.000Z</published>
    <updated>2022-09-04T12:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Seate控制分布式事务：<br>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><h1 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h1><p>[下载地址]<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><h1 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h1><p>我们需要配置到nacos中，因此需要如下配置来修改。</p><h2 id="2-2-1-数据库"><a href="#2-2-1-数据库" class="headerlink" title="2.2.1 数据库"></a>2.2.1 数据库</h2><p>建立seate数据库所需的表</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> table <span class="hljs-symbol">`global_table`</span> (<br> <span class="hljs-symbol">`xid`</span> varchar(<span class="hljs-number">128</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br> <span class="hljs-symbol">`transaction_id`</span> bigint,<br> <span class="hljs-symbol">`status`</span> tinyint <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br> <span class="hljs-symbol">`application_id`</span> varchar(<span class="hljs-number">32</span>),<br> <span class="hljs-symbol">`transaction_service_group`</span> varchar(<span class="hljs-number">32</span>),<br> <span class="hljs-symbol">`transaction_name`</span> varchar(<span class="hljs-number">128</span>),<br> <span class="hljs-symbol">`timeout`</span> int,<br> <span class="hljs-symbol">`begin_time`</span> bigint,<br> <span class="hljs-symbol">`application_data`</span> varchar(<span class="hljs-number">2000</span>),<br> <span class="hljs-symbol">`gmt_create`</span> datetime,<br> <span class="hljs-symbol">`gmt_modified`</span> datetime,<br> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> (<span class="hljs-symbol">`xid`</span>),<br> <span class="hljs-keyword">key</span> <span class="hljs-symbol">`idx_gmt_modified_status`</span> (<span class="hljs-symbol">`gmt_modified`</span>, <span class="hljs-symbol">`status`</span>),<br> <span class="hljs-keyword">key</span> <span class="hljs-symbol">`idx_transaction_id`</span> (<span class="hljs-symbol">`transaction_id`</span>)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> table <span class="hljs-symbol">`branch_table`</span> (<br> <span class="hljs-symbol">`branch_id`</span> bigint <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br> <span class="hljs-symbol">`xid`</span> varchar(<span class="hljs-number">128</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br> <span class="hljs-symbol">`transaction_id`</span> bigint ,<br> <span class="hljs-symbol">`resource_group_id`</span> varchar(<span class="hljs-number">32</span>),<br> <span class="hljs-symbol">`resource_id`</span> varchar(<span class="hljs-number">256</span>) ,<br> <span class="hljs-symbol">`lock_key`</span> varchar(<span class="hljs-number">128</span>) ,<br> <span class="hljs-symbol">`branch_type`</span> varchar(<span class="hljs-number">8</span>) ,<br> <span class="hljs-symbol">`status`</span> tinyint,<br> <span class="hljs-symbol">`client_id`</span> varchar(<span class="hljs-number">64</span>),<br> <span class="hljs-symbol">`application_data`</span> varchar(<span class="hljs-number">2000</span>),<br> <span class="hljs-symbol">`gmt_create`</span> datetime,<br> <span class="hljs-symbol">`gmt_modified`</span> datetime,<br> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> (<span class="hljs-symbol">`branch_id`</span>),<br> <span class="hljs-keyword">key</span> <span class="hljs-symbol">`idx_xid`</span> (<span class="hljs-symbol">`xid`</span>)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> table <span class="hljs-symbol">`lock_table`</span> (<br> <span class="hljs-symbol">`row_key`</span> varchar(<span class="hljs-number">128</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br> <span class="hljs-symbol">`xid`</span> varchar(<span class="hljs-number">96</span>),<br> <span class="hljs-symbol">`transaction_id`</span> long ,<br> <span class="hljs-symbol">`branch_id`</span> long,<br> <span class="hljs-symbol">`resource_id`</span> varchar(<span class="hljs-number">256</span>) ,<br> <span class="hljs-symbol">`table_name`</span> varchar(<span class="hljs-number">32</span>) ,<br> <span class="hljs-symbol">`pk`</span> varchar(<span class="hljs-number">36</span>) ,<br> <span class="hljs-symbol">`gmt_create`</span> datetime ,<br> <span class="hljs-symbol">`gmt_modified`</span> datetime,<br> <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>(<span class="hljs-symbol">`row_key`</span>)<br>);<br></code></pre></td></tr></table></figure><p>还需要下面这张表，初始化在你当前的业务数据库中，用于AT 模式XID记录。与server端无关（注：业务数据库）<br><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`undo_log`</span> (<br> <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br> <span class="hljs-symbol">`branch_id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`xid`</span> varchar(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`context`</span> varchar(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`rollback_info`</span> longblob <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`log_status`</span> int(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`log_created`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`log_modified`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`ext`</span> varchar(<span class="hljs-number">100</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`ux_undo_log`</span> (<span class="hljs-symbol">`xid`</span>,<span class="hljs-symbol">`branch_id`</span>)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">1</span> DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure></p><h2 id="2-2-2-配置文件"><a href="#2-2-2-配置文件" class="headerlink" title="2.2.2 配置文件"></a>2.2.2 配置文件</h2><h3 id="1-registry-conf"><a href="#1-registry-conf" class="headerlink" title="1.registry.conf"></a>1.registry.conf</h3><figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">registry &#123;<br>  <span class="hljs-comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br>  <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>  <span class="hljs-attr">loadBalance</span> = <span class="hljs-string">&quot;RandomLoadBalance&quot;</span><br>  <span class="hljs-attr">loadBalanceVirtualNodes</span> = <span class="hljs-number">10</span><br><br>  nacos &#123;<br>    <span class="hljs-attr">application</span> = <span class="hljs-string">&quot;seata-server&quot;</span><br>    <span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>    <span class="hljs-attr">group</span> = <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>    <span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">cluster</span> = <span class="hljs-string">&quot;default&quot;</span><br>    <span class="hljs-attr">username</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>  &#125;<br>&#125;<br> <br>config &#123;<br>  <span class="hljs-comment"># file、nacos 、apollo、zk、consul、etcd3</span><br>  <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>  nacos &#123;<br>    <span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>    <span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">group</span> = <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>    <span class="hljs-attr">username</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-file-conf"><a href="#2-file-conf" class="headerlink" title="2.file.conf"></a>2.file.conf</h3><figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">store &#123;<br>  <span class="hljs-comment">## store mode: file、db、redis</span><br>  <span class="hljs-attr">mode</span> = <span class="hljs-string">&quot;db&quot;</span><br>  <span class="hljs-comment">## database store property</span><br>  db &#123;<br>    <span class="hljs-comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span><br>    <span class="hljs-attr">datasource</span> = <span class="hljs-string">&quot;druid&quot;</span><br>    <span class="hljs-comment">## mysql/oracle/postgresql/h2/oceanbase etc.</span><br>    <span class="hljs-attr">dbType</span> = <span class="hljs-string">&quot;mysql&quot;</span><br>    <span class="hljs-attr">driverClassName</span> = <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3307/seata?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span><br>    <span class="hljs-attr">user</span> = <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-attr">minConn</span> = <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxConn</span> = <span class="hljs-number">100</span><br>    <span class="hljs-attr">globalTable</span> = <span class="hljs-string">&quot;global_table&quot;</span><br>    <span class="hljs-attr">branchTable</span> = <span class="hljs-string">&quot;branch_table&quot;</span><br>    <span class="hljs-attr">lockTable</span> = <span class="hljs-string">&quot;lock_table&quot;</span><br>    <span class="hljs-attr">queryLimit</span> = <span class="hljs-number">100</span><br>    <span class="hljs-attr">maxWait</span> = <span class="hljs-number">5000</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-3-启动"><a href="#2-3-启动" class="headerlink" title="2.3 启动"></a>2.3 启动</h1><p>进入<code>seate</code>文件夹下，运行<code>bin/seate-server.xx</code>，注意，先运行nacos。<br>完成后，查看nacos服务是否发现<code>seate-server</code>服务，并且需要注意分组是否需要修改。</p><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h1 id="3-1-maven"><a href="#3-1-maven" class="headerlink" title="3.1 maven"></a>3.1 maven</h1><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-2-配置文件"><a href="#3-2-配置文件" class="headerlink" title="3.2 配置文件"></a>3.2 配置文件</h1><ol><li><p>把下载的seate项目中的file.conf， registry.conf复制到全部项目中resource目录下。<br><code>file.conf</code>文件中此处添加:</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">service &#123;<br>  ## vgroup_mapping.<span class="hljs-keyword">server</span>-<span class="hljs-keyword">order</span>-seata-service-<span class="hljs-keyword">group</span> = &quot;default&quot;<br>  # 这个地方的my-<span class="hljs-keyword">group</span>我们下面会在yml中配置。<br>  vgroup_mapping.my-<span class="hljs-keyword">group</span> = &quot;default&quot;<br>  # 是我们seate刚才启动的地址和端口号（默认<span class="hljs-number">8091</span>）<br>  <span class="hljs-keyword">default</span>.grouplist = &quot;10.205.17.142:8091&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>service是和store同级配置（mode=‘file’不需要修改）</p></li><li><p>application.yml</p><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less">spring:<br>application:<br>name: server-<span class="hljs-attribute">order</span><br><span class="hljs-attribute">datasource</span>:<br><span class="hljs-attribute">driver-class-name</span>: com.mysql.jdbc.Driver<br><span class="hljs-attribute">username</span>: root<br><span class="hljs-attribute">password</span>: root<br><span class="hljs-attribute">url</span>: <span class="hljs-attribute">jdbc</span>:<span class="hljs-attribute">mysql</span>:<span class="hljs-comment">//127.0.0.1:3306/order</span><br><span class="hljs-attribute">cloud</span>:<br><span class="hljs-attribute">alibaba</span>:<br><span class="hljs-attribute">seata</span>:<br><span class="hljs-attribute">tx-service-group</span>: my-group<br></code></pre></td></tr></table></figure><p>此处的my-group是需要和file.conf添加内容一样的。<br>其他项目同样需要配置。</p></li></ol><h1 id="3-3-代码使用"><a href="#3-3-代码使用" class="headerlink" title="3.3 代码使用"></a>3.3 代码使用</h1><p>配置数据库连接代理（此处使用的mybatis-plus）(涉及项目都需要配置)<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">@Configuration<br>public <span class="hljs-keyword">class</span> DataSourceProxyConfig &#123;<br><br>  @Bean<br>  @<span class="hljs-constructor">ConfigurationProperties(<span class="hljs-params">prefix</span> = <span class="hljs-string">&quot;spring.datasource&quot;</span>)</span><br>  public DataSource data<span class="hljs-constructor">Source()</span> &#123;<br>    return <span class="hljs-keyword">new</span> <span class="hljs-constructor">DruidDataSource()</span>;<br>  &#125;<br><br>  @Bean<br>  public DataSourceProxy data<span class="hljs-constructor">SourceProxy(DataSource <span class="hljs-params">dataSource</span>)</span> &#123;<br>    return <span class="hljs-keyword">new</span> <span class="hljs-constructor">DataSourceProxy(<span class="hljs-params">dataSource</span>)</span>;<br>  &#125;<br><br>  @Bean<br>  public SqlSessionFactory sql<span class="hljs-constructor">SessionFactoryBean(DataSourceProxy <span class="hljs-params">dataSourceProxy</span>)</span> throws Exception &#123;<br>    SqlSessionFactoryBean sqlSessionFactoryBean = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SqlSessionFactoryBean()</span>;<br>    sqlSessionFactoryBean.set<span class="hljs-constructor">DataSource(<span class="hljs-params">dataSourceProxy</span>)</span>;<br><br>    <span class="hljs-comment">//如果你使用的mybatis，下面隔开内容不需要配置</span><br>    <span class="hljs-comment">//------------------------------------------------------------------------------</span><br>    <span class="hljs-comment">//实体类所在包</span><br>    sqlSessionFactoryBean.set<span class="hljs-constructor">TypeAliasesPackage(<span class="hljs-string">&quot;com.example.springbootorder.pojo&quot;</span>)</span>;<br>    MybatisConfiguration configuration = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MybatisConfiguration()</span>;<br>    configuration.set<span class="hljs-constructor">DefaultScriptingLanguage(MybatisXMLLanguageDriver.<span class="hljs-params">class</span>)</span>;<br>    configuration.set<span class="hljs-constructor">JdbcTypeForNull(JdbcType.NULL)</span>;<br>    <span class="hljs-comment">//-----------------------------------------------------------------------------</span><br><br><br>    sqlSessionFactoryBean.set<span class="hljs-constructor">Configuration(<span class="hljs-params">configuration</span>)</span>;<br>    return sqlSessionFactoryBean.get<span class="hljs-constructor">Object()</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>业务中使用只需要在事务发起的地方加一个@GlobalTransactional<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 分布式调用</span><br><span class="hljs-comment">*/</span><br>@<span class="hljs-constructor">GetMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;seate&quot;</span>)</span><br>@GlobalTransactional<br>public String create<span class="hljs-constructor">Order(@RequestParam(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;userId&quot;</span>)</span> String userId)&#123;<br>  <span class="hljs-built_in">int</span> i = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadLocalRandom</span>.</span></span>current<span class="hljs-literal">()</span>.next<span class="hljs-constructor">Int(9000000)</span> + <span class="hljs-number">1000000</span>;<br>  UserOrder userOrder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UserOrder()</span>;<br>  userOrder.set<span class="hljs-constructor">OrderNo(String.<span class="hljs-params">valueOf</span>(<span class="hljs-params">i</span>)</span>);<br>  userOrder.set<span class="hljs-constructor">UserId(<span class="hljs-params">userId</span>)</span>;<br>  userOrder.set<span class="hljs-constructor">Money(10)</span>;<br>  userOrderDao.insert(userOrder);<br>  String s = userFeign.reduce<span class="hljs-constructor">Quota(10, <span class="hljs-params">userId</span>)</span>;<br>  return s;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">配置seate</summary>
    
    
    
    <category term="分布式事务" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
    
    <category term="seate" scheme="http://example.com/tags/seate/"/>
    
    <category term="分布式事务" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>es在java环境中使用</title>
    <link href="http://example.com/2022/09/01/es-java/"/>
    <id>http://example.com/2022/09/01/es-java/</id>
    <published>2022-09-01T22:11:48.000Z</published>
    <updated>2022-09-27T14:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、java-api-实现索引管理"><a href="#一、java-api-实现索引管理" class="headerlink" title="一、java api 实现索引管理"></a>一、java api 实现索引管理</h2><h1 id="1-1-创建索引"><a href="#1-1-创建索引" class="headerlink" title="1.1 创建索引"></a>1.1 创建索引</h1><h2 id="1-1-1-获取客户端"><a href="#1-1-1-获取客户端" class="headerlink" title="1.1.1 获取客户端"></a>1.1.1 获取客户端</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">RestClientBuilder restClientBuilder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RestClient</span>.</span></span>builder(<span class="hljs-keyword">new</span> <span class="hljs-constructor">HttpHost(<span class="hljs-string">&quot;113.31.112.15&quot;</span>, 9200, <span class="hljs-string">&quot;http&quot;</span>)</span>).set<span class="hljs-constructor">HttpClientConfigCallback(<span class="hljs-params">new</span> RestClientBuilder.HttpClientConfigCallback()</span> &#123;<br>    @Override<br>    public HttpAsyncClientBuilder customize<span class="hljs-constructor">HttpClient(HttpAsyncClientBuilder <span class="hljs-params">httpAsyncClientBuilder</span>)</span> &#123;<br>        CredentialsProvider basicCredentialsProvider = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BasicCredentialsProvider()</span>;<br>        basicCredentialsProvider.set<span class="hljs-constructor">Credentials(AuthScope.ANY, <span class="hljs-params">new</span> UsernamePasswordCredentials(<span class="hljs-string">&quot;elastic&quot;</span>, <span class="hljs-string">&quot;zCAgwD2wXL7uDMFnVsNQ&quot;</span>)</span>);<br>        return httpAsyncClientBuilder.set<span class="hljs-constructor">DefaultCredentialsProvider(<span class="hljs-params">basicCredentialsProvider</span>)</span>;<br>    &#125;<br>&#125;);<br>RestHighLevelClient client = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RestHighLevelClient(<span class="hljs-params">restClientBuilder</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="1-1-2-setting"><a href="#1-1-2-setting" class="headerlink" title="1.1.2 setting"></a>1.1.2 setting</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">final</span> CreateIndexRequest my_index = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CreateIndexRequest</span>(<span class="hljs-string">&quot;my_index&quot;</span>);<br>my_index.<span class="hljs-built_in">settings</span>(Settings.<span class="hljs-built_in">builder</span>()<br>                .<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;number_of_shards&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br>                .<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;number_of_replicas&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br>        .<span class="hljs-built_in">build</span>());<br><br></code></pre></td></tr></table></figure><h2 id="1-1-3-mapping"><a href="#1-1-3-mapping" class="headerlink" title="1.1.3 mapping"></a>1.1.3 mapping</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1.</span><br>my_index.mapping(<span class="hljs-string">&quot;json&quot;</span>, XContentType.JSON);<br><br><span class="hljs-comment">// 2</span><br>Map&lt;String, Object&gt; f1 = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br>Map&lt;String, Object&gt; f2 = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br>f1.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>);<br>f2.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>);<br><br>Map&lt;String, Object&gt; properties = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br>properties.put(<span class="hljs-string">&quot;field1&quot;</span>, f1);<br>properties.put(<span class="hljs-string">&quot;field2&quot;</span>, f2);<br><br>Map&lt;String, Object&gt; mapping = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br>mapping.put(<span class="hljs-string">&quot;properites&quot;</span>, properties);<br>my_index.mapping(mapping);<br><br><span class="hljs-comment">// 3</span><br>XContentBuilder builder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">XContentFactory</span>.</span></span>json<span class="hljs-constructor">Builder()</span>;<br>builder.start<span class="hljs-constructor">Object()</span>;<br>&#123;<br>    builder.start<span class="hljs-constructor">Object(<span class="hljs-string">&quot;properties&quot;</span>)</span>;<br>    &#123;<br>        builder.start<span class="hljs-constructor">Object(<span class="hljs-string">&quot;field1&quot;</span>)</span>;<br>        &#123;<br>            builder.field(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>);<br>        &#125;<br>        builder.<span class="hljs-keyword">end</span><span class="hljs-constructor">Object()</span>;<br>        builder.start<span class="hljs-constructor">Object(<span class="hljs-string">&quot;field2&quot;</span>)</span>;<br>        &#123;<br>            builder.field(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>);<br>        &#125;<br>        builder.<span class="hljs-keyword">end</span><span class="hljs-constructor">Object()</span>;<br>    &#125;<br>    builder.<span class="hljs-keyword">end</span><span class="hljs-constructor">Object()</span>;<br>&#125;<br>builder.<span class="hljs-keyword">end</span><span class="hljs-constructor">Object()</span>;<br>my_index.mapping(builder);<br></code></pre></td></tr></table></figure><h2 id="1-1-4-别名"><a href="#1-1-4-别名" class="headerlink" title="1.1.4 别名"></a>1.1.4 别名</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">my_index.<span class="hljs-keyword">alias</span>(<span class="hljs-built_in">new</span> <span class="hljs-keyword">Alias</span>(&quot;hello&quot;));<br></code></pre></td></tr></table></figure><h2 id="1-1-5-其他配置"><a href="#1-1-5-其他配置" class="headerlink" title="1.1.5 其他配置"></a>1.1.5 其他配置</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 设置超时时间</span><br>my_index.set<span class="hljs-constructor">Timeout(TimeValue.<span class="hljs-params">timeValueSeconds</span>(10)</span>);<br><span class="hljs-comment">// 主节点超时时间</span><br>my_index.set<span class="hljs-constructor">MasterTimeout(TimeValue.<span class="hljs-params">timeValueSeconds</span>(5)</span>);<br><span class="hljs-comment">// 创建索引api返回相应之前等待活动分片的数量</span><br>my_index.wait<span class="hljs-constructor">ForActiveShards(ActiveShardCount.<span class="hljs-params">from</span>(1)</span>);<br></code></pre></td></tr></table></figure><h2 id="1-1-6-结果"><a href="#1-1-6-结果" class="headerlink" title="1.1.6 结果"></a>1.1.6 结果</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">CreateIndexResponse createIndexResponse = client.<span class="hljs-built_in">indices</span>().<span class="hljs-built_in">create</span>(my_index, RequestOptions.<span class="hljs-literal">DEFAULT</span>);<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> acknowledged = createIndexResponse.<span class="hljs-built_in">isAcknowledged</span>();<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> shardsAcknowledged = createIndexResponse.<span class="hljs-built_in">isShardsAcknowledged</span>();<br></code></pre></td></tr></table></figure><h2 id="1-1-7-异步执行"><a href="#1-1-7-异步执行" class="headerlink" title="1.1.7 异步执行"></a>1.1.7 异步执行</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">ActionListener&lt;CreateIndexResponse&gt; actionListener = <span class="hljs-keyword">new</span> ActionListener&lt;CreateIndexResponse&gt;() &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onResponse</span>(<span class="hljs-params">CreateIndexResponse createIndexResponse</span>)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onFailure</span>(<span class="hljs-params">Exception e</span>)</span> &#123;<br><br>    &#125;<br>&#125;;<br>client.indices().createAsync(my_index, RequestOptions.DEFAULT, actionListener);<br></code></pre></td></tr></table></figure><h1 id="1-2-删除索引"><a href="#1-2-删除索引" class="headerlink" title="1.2 删除索引"></a>1.2 删除索引</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">final</span> DeleteIndexRequest my_index1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DeleteIndexRequest</span>(<span class="hljs-string">&quot;my_index&quot;</span>);<br><span class="hljs-keyword">final</span> AcknowledgedResponse <span class="hljs-keyword">delete</span> = client.<span class="hljs-built_in">indices</span>().<span class="hljs-built_in"><span class="hljs-keyword">delete</span></span>(my_index1, RequestOptions.<span class="hljs-literal">DEFAULT</span>);<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> acknowledged1 = <span class="hljs-keyword">delete</span>.<span class="hljs-built_in">isAcknowledged</span>();<br></code></pre></td></tr></table></figure><h1 id="1-3-查看索引"><a href="#1-3-查看索引" class="headerlink" title="1.3 查看索引"></a>1.3 查看索引</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">final</span> GetIndexRequest my_index2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GetIndexRequest</span>(<span class="hljs-string">&quot;my_index&quot;</span>);<br><span class="hljs-comment">// 从主节点返回本地索引信息状态</span><br>my_index2.<span class="hljs-built_in">local</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 以适合人类的格式返回</span><br>my_index2.<span class="hljs-built_in">humanReadable</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 是否返回每个索引的所有默认配置</span><br>my_index2.<span class="hljs-built_in">includeDefaults</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> exists = client.<span class="hljs-built_in">indices</span>().<span class="hljs-built_in">exists</span>(my_index2, RequestOptions.<span class="hljs-literal">DEFAULT</span>);<br></code></pre></td></tr></table></figure><h1 id="1-4-关闭索引"><a href="#1-4-关闭索引" class="headerlink" title="1.4 关闭索引"></a>1.4 关闭索引</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">final</span> CloseIndexRequest my_index3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CloseIndexRequest</span>(<span class="hljs-string">&quot;my_index&quot;</span>);<br><span class="hljs-keyword">final</span> CloseIndexResponse close = client.<span class="hljs-built_in">indices</span>().<span class="hljs-built_in">close</span>(my_index3, RequestOptions.<span class="hljs-literal">DEFAULT</span>);<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> acknowledged2 = close.<span class="hljs-built_in">isAcknowledged</span>();<br></code></pre></td></tr></table></figure><h1 id="1-5-开启索引"><a href="#1-5-开启索引" class="headerlink" title="1.5 开启索引"></a>1.5 开启索引</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">final</span> OpenIndexRequest my_index4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">OpenIndexRequest</span>(<span class="hljs-string">&quot;my_index&quot;</span>);<br><span class="hljs-keyword">final</span> OpenIndexResponse open = client.<span class="hljs-built_in">indices</span>().<span class="hljs-built_in">open</span>(my_index4, RequestOptions.<span class="hljs-literal">DEFAULT</span>);<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> acknowledged3 = open.<span class="hljs-built_in">isAcknowledged</span>();<br></code></pre></td></tr></table></figure><h2 id="二、搜索语法入门"><a href="#二、搜索语法入门" class="headerlink" title="二、搜索语法入门"></a>二、搜索语法入门</h2><h1 id="2-1-query-string-searc"><a href="#2-1-query-string-searc" class="headerlink" title="2.1 query string searc"></a>2.1 query string searc</h1><p>无条件搜索<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br></code></pre></td></tr></table></figure></p><ul><li>took: 花费多长时间</li><li>time_out：是否超时</li><li>_shards：<ul><li>total：总共分片数</li><li>successful：成功分片数</li><li>skipped：跳过分片数</li><li>failed：失败分片数</li></ul></li><li>total：查询总数</li><li>max_score：就是docuemnt对于一个search的相关度的匹配分数，越相关，就越匹配，分数就越高。</li></ul><h1 id="2-2-传参"><a href="#2-2-传参" class="headerlink" title="2.2 传参"></a>2.2 传参</h1><p>与http请求传参类似<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> book/_search?<span class="hljs-attribute">q</span>=name:java&amp;sort=price:desc<br></code></pre></td></tr></table></figure><br>类比<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%java%&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> price <span class="hljs-keyword">desc</span><br></code></pre></td></tr></table></figure></p><h1 id="2-3-图解timeout机制"><a href="#2-3-图解timeout机制" class="headerlink" title="2.3 图解timeout机制"></a>2.3 图解timeout机制</h1><p>指定每个shard只能在给定的时间内查询数据，能有几条就返回几条，返回给客户端，保住了业务。</p><ul><li>请求设置<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> book/_search?<span class="hljs-attribute">timeout</span>=10ms<br></code></pre></td></tr></table></figure></li><li>全局设置<br>配置文件中设置<code>search.default_search_timeout: 100ms</code>，默认不超时。</li></ul><h2 id="三、multi-index多索引搜索"><a href="#三、multi-index多索引搜索" class="headerlink" title="三、multi-index多索引搜索"></a>三、multi-index多索引搜索</h2><h1 id="3-1-搜索模式"><a href="#3-1-搜索模式" class="headerlink" title="3.1 搜索模式"></a>3.1 搜索模式</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">/_search                查询索引下所有数据<br><span class="hljs-regexp">/index1/</span>_search         查询指定索引下所有数据<br><span class="hljs-regexp">/index1,index2/</span>_search  查询两个索引下的数据<br><span class="hljs-regexp">/index*/</span>_search         匹配规则下的所有索引<br></code></pre></td></tr></table></figure><p>应用场景：生产环境log可以按照日志分开。</p><h1 id="3-2-图解简单的搜索原理"><a href="#3-2-图解简单的搜索原理" class="headerlink" title="3.2 图解简单的搜索原理"></a>3.2 图解简单的搜索原理</h1><h2 id="四、分页搜索"><a href="#四、分页搜索" class="headerlink" title="四、分页搜索"></a>四、分页搜索</h2><h1 id="4-1-分页搜索的语法"><a href="#4-1-分页搜索的语法" class="headerlink" title="4.1 分页搜索的语法"></a>4.1 分页搜索的语法</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">sql</span>: <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> book <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">5</span><br>size, <span class="hljs-keyword">from</span><br></code></pre></td></tr></table></figure><p>例子<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /book/_search?<span class="hljs-attribute">size</span>=10<br></code></pre></td></tr></table></figure></p><h2 id="五、query-string基础语法"><a href="#五、query-string基础语法" class="headerlink" title="五、query string基础语法"></a>五、query string基础语法</h2><h2 id="六、query-DSL入门"><a href="#六、query-DSL入门" class="headerlink" title="六、query DSL入门"></a>六、query DSL入门</h2><h2 id="七、Fiter"><a href="#七、Fiter" class="headerlink" title="七、Fiter"></a>七、Fiter</h2><h2 id="八、定位错误语法和定制排序规则"><a href="#八、定位错误语法和定制排序规则" class="headerlink" title="八、定位错误语法和定制排序规则"></a>八、定位错误语法和定制排序规则</h2><h2 id="九、Text字段排序问题"><a href="#九、Text字段排序问题" class="headerlink" title="九、Text字段排序问题"></a>九、Text字段排序问题</h2><h2 id="十、Scroll分批查询"><a href="#十、Scroll分批查询" class="headerlink" title="十、Scroll分批查询"></a>十、Scroll分批查询</h2><h2 id="十一、java-api实现搜索"><a href="#十一、java-api实现搜索" class="headerlink" title="十一、java api实现搜索"></a>十一、java api实现搜索</h2><h2 id="十二、tfidf算法"><a href="#十二、tfidf算法" class="headerlink" title="十二、tfidf算法"></a>十二、tfidf算法</h2><h2 id="十三、Doc-value"><a href="#十三、Doc-value" class="headerlink" title="十三、Doc value"></a>十三、Doc value</h2><h2 id="十四、搜索参数小结"><a href="#十四、搜索参数小结" class="headerlink" title="十四、搜索参数小结"></a>十四、搜索参数小结</h2><h2 id="十五、聚合查询"><a href="#十五、聚合查询" class="headerlink" title="十五、聚合查询"></a>十五、聚合查询</h2><h2 id="十六、es7-sql新特性"><a href="#十六、es7-sql新特性" class="headerlink" title="十六、es7 sql新特性"></a>十六、es7 sql新特性</h2>]]></content>
    
    
    <summary type="html">es在java中使用</summary>
    
    
    
    <category term="分布式搜索" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="es" scheme="http://example.com/tags/es/"/>
    
    <category term="分布式搜索" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>es配置ik分词器及热更新</title>
    <link href="http://example.com/2022/09/01/es-ik/"/>
    <id>http://example.com/2022/09/01/es-ik/</id>
    <published>2022-09-01T16:38:27.000Z</published>
    <updated>2022-09-01T13:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>JDK 8</li><li>CentOS 7</li><li>Elasticsearch 7.9.3单节点</li></ul><h2 id="配置ik分词器"><a href="#配置ik分词器" class="headerlink" title="配置ik分词器"></a>配置ik分词器</h2><h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h1><p>[下载地址]<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.9.3">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.9.3</a></p><p>注意下载的版本必须与es版本一致。</p><h1 id="2-添加"><a href="#2-添加" class="headerlink" title="2.添加"></a>2.添加</h1><p>将上面的zip文件添加至<code>es/plugins/ik/</code>文件夹下。<br><code>unzip xxx</code>来解压给文件到当前文件夹即可。</p><h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h1><p>完成上面后，重启es服务即可。<br>运行下面的语句，查看能否使用分词器，分解中文。<br><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">POST _analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;你好世界&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="ik分词器配置热更新中文词"><a href="#ik分词器配置热更新中文词" class="headerlink" title="ik分词器配置热更新中文词"></a>ik分词器配置热更新中文词</h2><h1 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h1><p>[下载地址]<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a><br>注意下载的版本必须与es版本一致。</p><h1 id="2-修改源码"><a href="#2-修改源码" class="headerlink" title="2.修改源码"></a>2.修改源码</h1><h2 id="2-1-修改版本"><a href="#2-1-修改版本" class="headerlink" title="2.1 修改版本"></a>2.1 修改版本</h2><p>文件<code>pom.xml</code>中：<br><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;elasticsearch.version&gt;</span><span class="hljs-attribute">7</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span>&lt;/elasticsearch.version&gt;<br></code></pre></td></tr></table></figure><br>虽然我们是根据版本来下载的源码，但是这里的版本可能与我们想要的版本不同，因此打包的时候名字不对。</p><h2 id="2-2-添加mysql包"><a href="#2-2-添加mysql包" class="headerlink" title="2.2 添加mysql包"></a>2.2 添加mysql包</h2><p>也是<code>pom.xml</code>文件中添加，版本自定即可：<br><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="2-3-增加jdbc文件"><a href="#2-3-增加jdbc文件" class="headerlink" title="2.3 增加jdbc文件"></a>2.3 增加jdbc文件</h2><p>增加文件<code>jdbc-reload.properties</code>添加至<code>config</code>文件夹中。<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">jdbc.<span class="hljs-attribute">url</span>=jdbc:mysql://localhost:3306/es_work?serverTimezone=GMT<br>jdbc.<span class="hljs-attribute">user</span>=root<br>jdbc.<span class="hljs-attribute">password</span>=123456<br>jdbc.reload.<span class="hljs-attribute">sql</span>=select word <span class="hljs-keyword">from</span> hot_words<br>jdbc.reload.stopword.<span class="hljs-attribute">sql</span>=select stopword as word <span class="hljs-keyword">from</span> hot_stopwords<br>jdbc.reload.<span class="hljs-attribute">interval</span>=1000<br></code></pre></td></tr></table></figure><br>这里有我们需要的两个表：<code>hot_words</code>和<code>hot_stopwords</code>，分别是热词和停用词的数据表。</p><h2 id="2-4-代码部分"><a href="#2-4-代码部分" class="headerlink" title="2.4 代码部分"></a>2.4 代码部分</h2><p>代码主要在<code>org.wltea.analyzer.dic.Dictionary</code>类中处理。</p><h3 id="2-4-1-线程"><a href="#2-4-1-线程" class="headerlink" title="2.4.1 线程"></a>2.4.1 线程</h3><p>添加下面代码：<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> HotDictReloadThread implements Runnable &#123;<br>    <span class="hljs-keyword">private</span> static final Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ESPluginLoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(HotDictReloadThread.<span class="hljs-params">class</span>.<span class="hljs-params">getName</span>()</span>);<br><br>    @Override<br>    public void run<span class="hljs-literal">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOGGER</span>.</span></span>info(<span class="hljs-string">&quot;reload hot dict from mysql&quot;</span>);<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dictionary</span>.</span></span>get<span class="hljs-constructor">Singleton()</span>.re<span class="hljs-constructor">LoadMainDict()</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><br>线程主要完成了死循环中的加载主数据的过程。<br>该线程添加<code>Dictionary</code>至下面中：<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">public static synchronized void initial(Configuration cfg) &#123;<br><span class="hljs-keyword">if</span> (singleton<span class="hljs-operator"> == </span>null) &#123;<br>synchronized (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dictionary</span>.</span></span><span class="hljs-keyword">class</span>) &#123;<br><span class="hljs-keyword">if</span> (singleton<span class="hljs-operator"> == </span>null) &#123;<br><br>singleton = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Dictionary(<span class="hljs-params">cfg</span>)</span>;<br>singleton.load<span class="hljs-constructor">MainDict()</span>;<br>singleton.load<span class="hljs-constructor">SurnameDict()</span>;<br>singleton.load<span class="hljs-constructor">QuantifierDict()</span>;<br>singleton.load<span class="hljs-constructor">SuffixDict()</span>;<br>singleton.load<span class="hljs-constructor">PrepDict()</span>;<br>singleton.load<span class="hljs-constructor">StopWordDict()</span>;<br><br><span class="hljs-comment">//!!!! mysql监控线程</span><br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">new</span> HotDictReloadThread()</span>).start<span class="hljs-literal">()</span>;<br><br><span class="hljs-keyword">if</span>(cfg.is<span class="hljs-constructor">EnableRemoteDict()</span>)&#123;<br><span class="hljs-comment">// 建立监控线程</span><br><span class="hljs-keyword">for</span> (String location : singleton.get<span class="hljs-constructor">RemoteExtDictionarys()</span>) &#123;<br><span class="hljs-comment">// 10 秒是初始延迟可以修改的 60是间隔时间 单位秒</span><br>pool.schedule<span class="hljs-constructor">AtFixedRate(<span class="hljs-params">new</span> Monitor(<span class="hljs-params">location</span>)</span>, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, TimeUnit.SECONDS);<br>&#125;<br><span class="hljs-keyword">for</span> (String location : singleton.get<span class="hljs-constructor">RemoteExtStopWordDictionarys()</span>) &#123;<br>pool.schedule<span class="hljs-constructor">AtFixedRate(<span class="hljs-params">new</span> Monitor(<span class="hljs-params">location</span>)</span>, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, TimeUnit.SECONDS);<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>完成后进入<code>Dictionary</code>下面的代码：<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> reLoadMainDict() &#123;<br>logger.<span class="hljs-keyword">info</span>(&quot;start to reload ik dict.&quot;);<br>// 新开一个实例加载词典，减少加载过程对当前词典使用的影响<br><span class="hljs-keyword">Dictionary</span> tmpDict = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Dictionary</span>(<span class="hljs-keyword">configuration</span>);<br>tmpDict.<span class="hljs-keyword">configuration</span> = getSingleton().<span class="hljs-keyword">configuration</span>;<br>tmpDict.loadMainDict();<br>tmpDict.loadStopWordDict();<br>_MainDict = tmpDict._MainDict;<br>_StopWords = tmpDict._StopWords;<br>logger.<span class="hljs-keyword">info</span>(&quot;reload ik dict finished.&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><br>需要注意这两行，分别完成了热词加载和停用词加载的工作：<br><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">tmpDict.loadMainDict()<span class="hljs-comment">;</span><br>tmpDict.loadStopWordDict()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p><h3 id="2-4-2"><a href="#2-4-2" class="headerlink" title="2.4.2"></a>2.4.2</h3><p>添加下面代码：<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties prop = <span class="hljs-keyword">new</span> Properties();<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>logger.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;error&quot;</span>,e);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="2-4-3-热词部分"><a href="#2-4-3-热词部分" class="headerlink" title="2.4.3 热词部分"></a>2.4.3 热词部分</h3><p>添加下面代码：<br><figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> loadMysqlExtDict() &#123;<br>Connection conn = <span class="hljs-keyword">null</span>;<br>Statement stmt = <span class="hljs-keyword">null</span>;<br>ResultSet rs = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>Path file = PathUtils.<span class="hljs-built_in">get</span>(getDictRoot(), <span class="hljs-string">&quot;/jdbc-reload.properties&quot;</span>);<br>prop.load(<span class="hljs-keyword">new</span> FileInputStream(file.toFile()));<br><br>logger.info(<span class="hljs-string">&quot;/jdbc-reload.properties&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">Object</span> <span class="hljs-built_in">key</span> : prop.keySet()) &#123;<br>logger.info(<span class="hljs-built_in">key</span> + <span class="hljs-string">&quot;=&quot;</span> + prop.getProperty(<span class="hljs-keyword">String</span>.valueOf(<span class="hljs-built_in">key</span>)));<br>&#125;<br><br>logger.info(<span class="hljs-string">&quot;query hot dict from mysql，&quot;</span> + prop.getProperty(<span class="hljs-string">&quot;jdbc.reload.sql&quot;</span>));<br><br>conn = DriverManager.getConnection(<br>prop.getProperty(<span class="hljs-string">&quot;jdbc.url&quot;</span>),<br>prop.getProperty(<span class="hljs-string">&quot;jdbc.user&quot;</span>),<br>prop.getProperty(<span class="hljs-string">&quot;jdbc.password&quot;</span>)<br>);<br>stmt = conn.createStatement();<br>rs = stmt.executeQuery(prop.getProperty(<span class="hljs-string">&quot;jdbc.reload.sql&quot;</span>));<br><br><span class="hljs-keyword">while</span> (rs.next())&#123;<br><span class="hljs-keyword">String</span> word = rs.getString(<span class="hljs-string">&quot;word&quot;</span>);<br>logger.info(<span class="hljs-string">&quot;hot word from mysql：&quot;</span> + word);<br>_MainDict.fillSegment(word.<span class="hljs-built_in">trim</span>().toCharArray());<br>&#125;<br>Thread.sleep(Integer.valueOf(<span class="hljs-keyword">String</span>.valueOf(prop.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;jdbc.reload.interval&quot;</span>))));<br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>logger.error(<span class="hljs-string">&quot;error&quot;</span>,e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>rs.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>logger.error(<span class="hljs-string">&quot;error&quot;</span>,e);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>stmt.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>logger.error(<span class="hljs-string">&quot;error&quot;</span>,e);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>conn.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>logger.error(<span class="hljs-string">&quot;error&quot;</span>,e);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>上面的代码主要完成了对数据中的热词加载。</p><p>将上面的代码添加至下面函数中：<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void load<span class="hljs-constructor">MainDict()</span> &#123;<br><span class="hljs-comment">// 建立一个主词典实例</span><br>_MainDict = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DictSegment((<span class="hljs-params">char</span>)</span> <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 读取主词典文件</span><br>Path file = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PathUtils</span>.</span></span>get(get<span class="hljs-constructor">DictRoot()</span>, Dictionary.PATH_DIC_MAIN);<br>load<span class="hljs-constructor">DictFile(<span class="hljs-params">_MainDict</span>, <span class="hljs-params">file</span>, <span class="hljs-params">false</span>, <span class="hljs-string">&quot;Main Dict&quot;</span>)</span>;<br><span class="hljs-comment">// 加载扩展词典</span><br>this.load<span class="hljs-constructor">ExtDict()</span>;<br><span class="hljs-comment">// 加载远程自定义词库</span><br>this.load<span class="hljs-constructor">RemoteExtDict()</span>;<br><span class="hljs-comment">// !!!! 加载mysql的主词典</span><br>this.load<span class="hljs-constructor">MysqlExtDict()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="2-4-4-停用词部分"><a href="#2-4-4-停用词部分" class="headerlink" title="2.4.4 停用词部分"></a>2.4.4 停用词部分</h3><p>添加下面代码：<br><figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> loadMySQLStopwordDict() &#123;<br>Connection conn = <span class="hljs-keyword">null</span>;<br>Statement stmt = <span class="hljs-keyword">null</span>;<br>ResultSet rs = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>Path file = PathUtils.<span class="hljs-built_in">get</span>(getDictRoot(), <span class="hljs-string">&quot;/jdbc-reload.properties&quot;</span>);<br>prop.load(<span class="hljs-keyword">new</span> FileInputStream(file.toFile()));<br><br>logger.info(<span class="hljs-string">&quot;[==========]jdbc-reload.properties&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">Object</span> <span class="hljs-built_in">key</span> : prop.keySet()) &#123;<br>logger.info(<span class="hljs-string">&quot;[==========]&quot;</span> + <span class="hljs-built_in">key</span> + <span class="hljs-string">&quot;=&quot;</span> + prop.getProperty(<span class="hljs-keyword">String</span>.valueOf(<span class="hljs-built_in">key</span>)));<br>&#125;<br><br>logger.info(<span class="hljs-string">&quot;[==========]query hot stopword dict from mysql, &quot;</span> + prop.getProperty(<span class="hljs-string">&quot;jdbc.reload.stopword.sql&quot;</span>) + <span class="hljs-string">&quot;......&quot;</span>);<br><br>conn = DriverManager.getConnection(<br>prop.getProperty(<span class="hljs-string">&quot;jdbc.url&quot;</span>),<br>prop.getProperty(<span class="hljs-string">&quot;jdbc.user&quot;</span>),<br>prop.getProperty(<span class="hljs-string">&quot;jdbc.password&quot;</span>));<br>stmt = conn.createStatement();<br>rs = stmt.executeQuery(prop.getProperty(<span class="hljs-string">&quot;jdbc.reload.stopword.sql&quot;</span>));<br><br><span class="hljs-keyword">while</span>(rs.next()) &#123;<br><span class="hljs-keyword">String</span> theWord = rs.getString(<span class="hljs-string">&quot;word&quot;</span>);<br>logger.info(<span class="hljs-string">&quot;[==========]hot stopword from mysql: &quot;</span> + theWord);<br>_StopWords.fillSegment(theWord.<span class="hljs-built_in">trim</span>().toCharArray());<br>&#125;<br><br>Thread.sleep(Integer.valueOf(<span class="hljs-keyword">String</span>.valueOf(prop.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;jdbc.reload.interval&quot;</span>))));<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>logger.error(<span class="hljs-string">&quot;erorr&quot;</span>, e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span>(rs != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>rs.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>logger.error(<span class="hljs-string">&quot;error&quot;</span>, e);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(stmt != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>stmt.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>logger.error(<span class="hljs-string">&quot;error&quot;</span>, e);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(conn != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>conn.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>logger.error(<span class="hljs-string">&quot;error&quot;</span>, e);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>上面的代码主要完成了对数据中的热词加载。</p><p>将上面的代码添加至下面函数中：<br><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadStopWordDict</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 建立主词典实例</span><br>_StopWords = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DictSegment</span>((<span class="hljs-keyword">char</span>) <span class="hljs-number">0</span>);<br><br>   ...<br><br><span class="hljs-comment">// !!!!从mysql中加载停用词</span><br><span class="hljs-keyword">this</span>.<span class="hljs-built_in">loadMySQLStopwordDict</span>();<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h1><h2 id="3-1-打包"><a href="#3-1-打包" class="headerlink" title="3.1 打包"></a>3.1 打包</h2><p><code>package</code>后，将<code>target</code>下的<code>release</code>中的zip文件复制到我们es中的<code>plugins/ik</code>中。</p><h2 id="3-2-准备包"><a href="#3-2-准备包" class="headerlink" title="3.2 准备包"></a>3.2 准备包</h2><p>因为引入了mysql包，因此需要到maven中把他拿出来。</p><h2 id="3-3-包替换"><a href="#3-3-包替换" class="headerlink" title="3.3 包替换"></a>3.3 包替换</h2><ol><li>进入es服务中，将打包的zip复制到<code>plugins/ik</code>中，解压。<strong>注意，这里在解压前一定要做好备份，因为config中，可能会有重要的词语。当然也可以直接将jar包覆盖，来减少侵入性。</strong></li><li>将<code>jdbc-reload.properties</code>文件复制到<code>ik/config</code>文件夹中。</li><li>将mysql包，移动到<code>es/lib</code>中。</li></ol><h2 id="3-4-运行"><a href="#3-4-运行" class="headerlink" title="3.4 运行"></a>3.4 运行</h2><p>重启es、kibana并测试即可。</p><h1 id="4-问题"><a href="#4-问题" class="headerlink" title="4.问题"></a>4.问题</h1><p>在热更新分词器的时候，出现了下面的问题</p><h2 id="4-1-SSL报错"><a href="#4-1-SSL报错" class="headerlink" title="4.1 SSL报错"></a>4.1 SSL报错</h2><p>需要配置证书，记录如下：</p><h3 id="4-1-1-在ES跟目录生成CA证书，需要输入名称和密码，可以直接回车不输入"><a href="#4-1-1-在ES跟目录生成CA证书，需要输入名称和密码，可以直接回车不输入" class="headerlink" title="4.1.1 在ES跟目录生成CA证书，需要输入名称和密码，可以直接回车不输入"></a>4.1.1 在ES跟目录生成CA证书，需要输入名称和密码，可以直接回车不输入</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bin/elasticsearch-certutil </span>ca<br></code></pre></td></tr></table></figure><h3 id="4-1-2-使用第一步生成的证书，产生p12密钥，需要输入密码的时候可以直接回车不输入"><a href="#4-1-2-使用第一步生成的证书，产生p12密钥，需要输入密码的时候可以直接回车不输入" class="headerlink" title="4.1.2 使用第一步生成的证书，产生p12密钥，需要输入密码的时候可以直接回车不输入"></a>4.1.2 使用第一步生成的证书，产生p12密钥，需要输入密码的时候可以直接回车不输入</h3><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">bin/elasticsearch-certutil cert --<span class="hljs-keyword">ca</span> elastic-<span class="hljs-keyword">stack</span>-<span class="hljs-keyword">ca</span>.p12<br></code></pre></td></tr></table></figure><p>此时在es中新建了两个文件。</p><h3 id="4-1-3-在config目录下，新建文件夹certs"><a href="#4-1-3-在config目录下，新建文件夹certs" class="headerlink" title="4.1.3 在config目录下，新建文件夹certs"></a>4.1.3 在config目录下，新建文件夹certs</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">mkdir config/certs<br></code></pre></td></tr></table></figure><h3 id="4-1-4-将elastic-certificates-p12文件，复制到config-certs文件夹下"><a href="#4-1-4-将elastic-certificates-p12文件，复制到config-certs文件夹下" class="headerlink" title="4.1.4 将elastic-certificates.p12文件，复制到config/certs文件夹下"></a>4.1.4 将elastic-certificates.p12文件，复制到config/certs文件夹下</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cp .<span class="hljs-regexp">/elastic-certificates.p12 ./</span>config/certs<br></code></pre></td></tr></table></figure><h3 id="4-1-5-修改配置文件config-elasticsearch-yml"><a href="#4-1-5-修改配置文件config-elasticsearch-yml" class="headerlink" title="4.1.5 修改配置文件config/elasticsearch.yml"></a>4.1.5 修改配置文件config/elasticsearch.yml</h3><p>添加如下代码<br><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: true<br>xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.enabled</span>: true<br>xpack<span class="hljs-selector-class">.license</span><span class="hljs-selector-class">.self_generated</span><span class="hljs-selector-class">.type</span>: basic<br>xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.verification_mode</span>: certificate<br>xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.keystore</span><span class="hljs-selector-class">.path</span>: certs/elastic-certificates.p12<br>xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.truststore</span><span class="hljs-selector-class">.path</span>: certs/elastic-certificates.p12<br></code></pre></td></tr></table></figure></p><h2 id="4-2-RuntimePermission"><a href="#4-2-RuntimePermission" class="headerlink" title="4.2 RuntimePermission"></a>4.2 RuntimePermission</h2><p>mysql远程实现异常处理。</p><h3 id="4-2-1-方案一"><a href="#4-2-1-方案一" class="headerlink" title="4.2.1 方案一"></a>4.2.1 方案一</h3><p>修改jdk 安全策略，即修改 java.policy文件。但是部分版本不支持,会修改无效。<br>进入jdk安装目录（mac 环境）<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_201.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/jre/</span>lib/security<br></code></pre></td></tr></table></figure><br>如果不知道jdk安装在哪的，使用下面命令<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>libexec/java_home -V<br></code></pre></td></tr></table></figure></p><p>找到java.policy文件,在最下面增加<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">permission <span class="hljs-keyword">java.net.SocketPermission </span><span class="hljs-string">&quot;*:*&quot;</span>,<span class="hljs-string">&quot;connect,resolve&quot;</span>;<br>permission <span class="hljs-keyword">java.lang.RuntimePermission </span><span class="hljs-string">&quot;getClassLoader&quot;</span>; <br>permission <span class="hljs-keyword">java.lang.RuntimePermission </span><span class="hljs-string">&quot;setContextClassLoader&quot;</span>;<br></code></pre></td></tr></table></figure></p><h3 id="4-2-2-方案二"><a href="#4-2-2-方案二" class="headerlink" title="4.2.2 方案二"></a>4.2.2 方案二</h3><p>在<code>es/config</code>文件夹下新建<code>policy.policy</code>文件，添加如下内容：<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">grant &#123;<br>permission <span class="hljs-keyword">java.net.SocketPermission </span><span class="hljs-string">&quot;*:*&quot;</span>,<span class="hljs-string">&quot;connect,resolve&quot;</span>;<br>permission <span class="hljs-keyword">java.lang.RuntimePermission </span><span class="hljs-string">&quot;getClassLoader&quot;</span>; <br>    permission <span class="hljs-keyword">java.lang.RuntimePermission </span><span class="hljs-string">&quot;setContextClassLoader&quot;</span>; <br>&#125;;<br></code></pre></td></tr></table></figure><br>然后修改jvm.option文件增加：<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">-Djava.<span class="hljs-keyword">security</span>.<span class="hljs-keyword">policy</span>=你的es安装目录/config/<span class="hljs-keyword">policy</span>.<span class="hljs-keyword">policy</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">es配置ik分词器</summary>
    
    
    
    <category term="分布式搜索" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>es修改密码</title>
    <link href="http://example.com/2022/08/06/es-7-change-password/"/>
    <id>http://example.com/2022/08/06/es-7-change-password/</id>
    <published>2022-08-06T23:37:16.000Z</published>
    <updated>2022-09-01T08:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>JDK 8</li><li>CentOS 7</li><li>Elasticsearch 7.9.3单节点</li></ul><h2 id="已知ES原密码，只需进行修改"><a href="#已知ES原密码，只需进行修改" class="headerlink" title="已知ES原密码，只需进行修改"></a>已知ES原密码，只需进行修改</h2><h1 id="输入请求"><a href="#输入请求" class="headerlink" title="输入请求"></a>输入请求</h1><figure class="highlight sml"><table><tr><td class="code"><pre><code class="hljs sml">curl -<span class="hljs-type">XPOST</span> -u elastic <span class="hljs-string">&quot;127.0.0.1:9200/_security/user/elastic/_password&quot;</span> -<span class="hljs-type">H</span> <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-type">Type</span>: application/json&#x27; -d&#x27;&#123;<span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;elastic123456&quot;</span>&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>其中elastic123456为修改后的密码</strong></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>控制台需要键入原来的密码进行验证<code>Enter host password for user &#39;elastic&#39;</code>。此处输入原密码如：<code>123456</code>。</p><h2 id="忘记密码，需要进行重置"><a href="#忘记密码，需要进行重置" class="headerlink" title="忘记密码，需要进行重置"></a>忘记密码，需要进行重置</h2><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>修改配置文件config/elasticsearch.yml，注释掉<code>支持x-pack</code>的配置，保存退出。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#xpack</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: true<br></code></pre></td></tr></table></figure></p><h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1><h1 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h1><p>使用下面的查询语句<br><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">curl -XGET <span class="hljs-string">&quot;127.0.0.1:9200/_cat/indices&quot;</span> -H <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-keyword">Type</span>: application/json&#x27;<br></code></pre></td></tr></table></figure><br>此处会显示<code>.security-7</code>的索引。</p><h1 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h1><p>我们将索引<code>.security-7</code>删除<br><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> -XDELETE <span class="hljs-number">127.0.0.1:9200</span>/.security-<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><br>如果打印了下面信息表示成功。<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;acknowledged&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><br>完成上面操作后，只需要重新创建所有密码即可完成初始化密码。</p>]]></content>
    
    
    <summary type="html">修改es密码</summary>
    
    
    
    <category term="分布式搜索" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="es" scheme="http://example.com/tags/es/"/>
    
    <category term="分布式搜索" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>elk在linux上简单安装</title>
    <link href="http://example.com/2022/08/06/es-linux/"/>
    <id>http://example.com/2022/08/06/es-linux/</id>
    <published>2022-08-06T21:02:25.000Z</published>
    <updated>2022-09-01T08:16:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于在linux中配置es"><a href="#关于在linux中配置es" class="headerlink" title="关于在linux中配置es"></a>关于在linux中配置es</h2><p><strong><em>需要java环境。</em></strong></p><p>Elastic官网：<a href="https://www.elastic.co/cn/">https://www.elastic.co/cn/</a><br>Elastic有一条完整的产品线及解决方案：Elasticsearch、Kibana、Logstash等，前面说的三个就是大家常说的ELK技术栈。<br>Elasticsearch<a href="https://www.elastic.co/cn/products/elasticsearch">https://www.elastic.co/cn/products/elasticsearch</a> 是Elastic Stack 的核心技术。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong><em>elasticsearch默认不允许以root账号运行。</em></strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>地址<code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.9.3-linux-x86_64.tar.gz</code></p><h2 id="解压并进入文件夹"><a href="#解压并进入文件夹" class="headerlink" title="解压并进入文件夹"></a>解压并进入文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf elasticsearch<br><span class="hljs-built_in">cd</span> elasticsearch<br></code></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>需要注意文件夹<code>bin</code>、<code>config</code>。</p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>进入config文件夹<br><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">cd config<br></code></pre></td></tr></table></figure></p><h2 id="jvm-option"><a href="#jvm-option" class="headerlink" title="jvm.option"></a>jvm.option</h2><p>编辑<code>jvm.option</code><br><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">vim jvm.<span class="hljs-keyword">option</span><br></code></pre></td></tr></table></figure></p><p>根据机器情况配置jvm内存<br><figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-Xms512m</span><br><span class="hljs-deletion">-Xmx512m</span><br></code></pre></td></tr></table></figure></p><p>我根据自己的配置为<code>512m</code>，如果机器内存大，则可以配置为<code>1g</code>。</p><h2 id="elasticsearch-yml"><a href="#elasticsearch-yml" class="headerlink" title="elasticsearch.yml"></a>elasticsearch.yml</h2><p>打开文件<br><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> elasticsearch.yml<br></code></pre></td></tr></table></figure></p><p>修改内容如下，这里需要注意这些配置都是注释掉了，只需要打开注释即可，主要配置的是<code>path</code>、<code>network</code>两个数据。<br><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">node.name:</span> node<span class="hljs-number">-1</span> <span class="hljs-meta">#配置当前es节点名称（默认是被注释的，并且默认有一个节点名）</span><br><span class="hljs-symbol">cluster.name:</span> my-application <span class="hljs-meta">#默认是被注释的，并且默认有一个集群名</span><br><br><span class="hljs-symbol">path.data:</span> /home/es/data <span class="hljs-meta"># 数据目录位置</span><br><span class="hljs-symbol">path.logs:</span> /home/es/logs <span class="hljs-meta"># 日志目录位置</span><br><br><span class="hljs-symbol">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>   <span class="hljs-meta">#绑定的ip：默认只允许本机访问，修改为0.0.0.0后则可以远程访问</span><br><span class="hljs-symbol">cluster.initial_master_nodes:</span> <span class="hljs-string">&quot;node-1&quot;</span> <span class="hljs-meta">#默认是被注释的 设置master节点列表 用逗号分隔</span><br><span class="hljs-meta">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</span><br></code></pre></td></tr></table></figure></p><p><code>data</code>和<code>logs</code>两个文件夹路径可以自行配置。</p><h3 id="elasticsearch-yml的其它可配置信息"><a href="#elasticsearch-yml的其它可配置信息" class="headerlink" title="elasticsearch.yml的其它可配置信息"></a>elasticsearch.yml的其它可配置信息</h3><div class="table-container"><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。</td></tr><tr><td>node.name</td><td>节点名，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</td></tr><tr><td>path.conf</td><td>设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/ elasticsearch</td></tr><tr><td>path.data</td><td>设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开</td></tr><tr><td>path.logs</td><td>设置日志文件的存储路径，默认是es根目录下的logs文件夹</td></tr><tr><td>path.plugins</td><td>设置插件的存放路径，默认是es根目录下的plugins文件夹</td></tr><tr><td>bootstrap.memory_lock</td><td>设置为true可以锁住ES使用的内存，避免内存进行swap</td></tr><tr><td>network.host</td><td>设置bind_host和publish_host，设置为0.0.0.0允许外网访问</td></tr><tr><td>http.port</td><td>设置对外服务的http端口，默认为9200。</td></tr><tr><td>transport.tcp.port</td><td>集群结点之间通信端口</td></tr><tr><td>discovery.zen.ping.timeout</td><td>设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>主结点数量的最少值 ,此值的公式为：(master_eligible_nodes / 2) + 1 ，比如：有3个符合要求的主结点，那么这里要设置为2</td></tr></tbody></table></div><h2 id="etc文件夹"><a href="#etc文件夹" class="headerlink" title="etc文件夹"></a>etc文件夹</h2><h3 id="etc-security-limits-conf"><a href="#etc-security-limits-conf" class="headerlink" title="/etc/security/limits.conf"></a>/etc/security/limits.conf</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>security/limits.conf<br></code></pre></td></tr></table></figure><p>需要在最后添加：<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>soft nofile 65536<br><span class="hljs-bullet">* </span>hard nofile 65536<br></code></pre></td></tr></table></figure></p><h3 id="etc-sysctl-conf"><a href="#etc-sysctl-conf" class="headerlink" title="/etc/sysctl.conf"></a>/etc/sysctl.conf</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysctl.conf<br></code></pre></td></tr></table></figure><p>最后添加一行<br><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">vm.max_map_count</span>=<span class="hljs-number">655360</span><br></code></pre></td></tr></table></figure><br>并在保存后运行命令：<code>sysctl -p</code>，如果权限不够可以使用<code>sudo</code>。</p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>进入<code>es</code>文件夹的根目录。<br>运行下面的命令：<br><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nohup</span> bin/elasticsearch<br></code></pre></td></tr></table></figure><br>默认端口</p><ul><li>9300：集群节点间通讯接口</li><li>9200：客户端访问接口</li></ul><h1 id="配置用户登录"><a href="#配置用户登录" class="headerlink" title="配置用户登录"></a>配置用户登录</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>需要在配置文件中开启x-pack验证, 修改config目录下面的elasticsearch.yml文件，在里面添加如下内容,并重启es.<br><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: true<br>xpack<span class="hljs-selector-class">.license</span><span class="hljs-selector-class">.self_generated</span><span class="hljs-selector-class">.type</span>: basic<br>xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.enabled</span>: true<br></code></pre></td></tr></table></figure></p><h2 id="自动生成密码"><a href="#自动生成密码" class="headerlink" title="自动生成密码"></a>自动生成密码</h2><p>运行下面的命令：<br><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">./bin/elasticsearch-setup-passwords <span class="hljs-keyword">auto</span><br></code></pre></td></tr></table></figure><br><strong>注意这里的密码一定要记住，否则需要重制。</strong></p><h2 id="以交互的方式设置用户名和密码"><a href="#以交互的方式设置用户名和密码" class="headerlink" title="以交互的方式设置用户名和密码"></a>以交互的方式设置用户名和密码</h2><p>运行下面的命令：<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/</span>elasticsearch-setup-passwords interactive<br></code></pre></td></tr></table></figure></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>运行下面的命令：<br><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust">curl -u elastic <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//127.0.0.1:9200/_xpack/security/_authenticate?pretty&#x27;</span><br></code></pre></td></tr></table></figure></p><h2 id="关于在linux中配置kibana"><a href="#关于在linux中配置kibana" class="headerlink" title="关于在linux中配置kibana"></a>关于在linux中配置kibana</h2><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><p>地址<code>wget https://artifacts.elastic.co/downloads/kibana/kibana-7.9.3-linux-x86_64.tar.gz</code></p><h2 id="解压并进入文件夹-1"><a href="#解压并进入文件夹-1" class="headerlink" title="解压并进入文件夹"></a>解压并进入文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf kibana<br><span class="hljs-built_in">cd</span> kibana<br></code></pre></td></tr></table></figure><h1 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="kibana-yml"><a href="#kibana-yml" class="headerlink" title="kibana.yml"></a>kibana.yml</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">vim config/kibana.yml<br></code></pre></td></tr></table></figure><p>需要配置如下信息<br><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">server.port:</span> <span class="hljs-number">5601</span>  <span class="hljs-meta"># 默认端口</span><br><span class="hljs-symbol">server.host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span> <span class="hljs-meta"># 主机 </span><br><span class="hljs-symbol">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://127.0.0.1:9200&quot;</span>]  <span class="hljs-meta"># elasticsearch所在的IP+端口</span><br><span class="hljs-meta"># 需要配置角色则需要配置下面的信息</span><br><span class="hljs-symbol">elasticsearch.username:</span> <span class="hljs-string">&quot;elastic&quot;</span><br><span class="hljs-symbol">elasticsearch.password:</span> <span class="hljs-string">&quot;elastic2021&quot;</span><br></code></pre></td></tr></table></figure></p><h1 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h1><p>运行下面的命令：<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">nohup .<span class="hljs-regexp">/bin/</span>kibana<br></code></pre></td></tr></table></figure></p><h1 id="查看kibana是否启动成功"><a href="#查看kibana是否启动成功" class="headerlink" title="查看kibana是否启动成功"></a>查看kibana是否启动成功</h1><p><a href="http://127.0.0.1:5601">http://127.0.0.1:5601</a></p><h2 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h2><h1 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>artifacts.elastic.co<span class="hljs-regexp">/downloads/</span>logstash/logstash-<span class="hljs-number">7.9</span>.<span class="hljs-number">3</span>.tar.gz<br></code></pre></td></tr></table></figure><h2 id="解压并进入文件夹-2"><a href="#解压并进入文件夹-2" class="headerlink" title="解压并进入文件夹"></a>解压并进入文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf logstash<br><span class="hljs-built_in">cd</span> logstash<br></code></pre></td></tr></table></figure><h1 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="logstash-sample-conf"><a href="#logstash-sample-conf" class="headerlink" title="logstash-sample.conf"></a>logstash-sample.conf</h2><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">vim config/logstash-<span class="hljs-keyword">sample</span>.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>建议配置如下信息<br><figure class="highlight puppet"><table><tr><td class="code"><pre><code class="hljs puppet"><span class="hljs-comment"># 数据输入部分</span><br><span class="hljs-keyword">input</span> &#123;<br><span class="hljs-comment">#filebeats方式</span><br>beats &#123;<br><span class="hljs-attr">port</span> =&gt; <span class="hljs-number">5044</span><br>        <span class="hljs-attr">type</span> =&gt; <span class="hljs-string">&quot;beats_log&quot;</span><br>&#125;<br><br>#自定义端口，一个项目可对应一个自定义tcp端口接收数据<br><span class="hljs-keyword">tcp</span> &#123;<br><span class="hljs-attr">mode</span> =&gt; <span class="hljs-string">&quot;server&quot;</span><br><span class="hljs-attr">host</span> =&gt; <span class="hljs-string">&quot;192.168.X.X&quot;</span> <span class="hljs-comment">#IP地址</span><br><span class="hljs-attr">port</span> =&gt; <span class="hljs-number">21022</span><br><span class="hljs-attr">codec</span> =&gt; json<br><span class="hljs-attr">type</span> =&gt; <span class="hljs-string">&quot;application-log&quot;</span> <span class="hljs-comment">#application一般为项目名称</span><br>&#125;<br>&#125;<br> <br><span class="hljs-comment"># 数据处理部分</span><br>filter&#123;<br>if[type] == <span class="hljs-string">&quot;application-log&quot;</span>&#123;<br><span class="hljs-keyword">mutate</span> &#123;<br><span class="hljs-attr">rename</span> =&gt; &#123;<span class="hljs-string">&quot;host&quot;</span> =&gt; <span class="hljs-string">&quot;hostname&quot;</span>&#125;<br>&#125;<br>&#125;<br>&#125;<br> <br><span class="hljs-comment"># 数据输出部分</span><br><span class="hljs-keyword">output</span> &#123;<br>    <span class="hljs-comment"># beat监控信息</span><br><span class="hljs-keyword">if</span> [<span class="hljs-built_in">type</span>] == <span class="hljs-string">&quot;beats_log&quot;</span>&#123;<br>elasticsearch &#123;<br>            <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.X.X:9200&quot;</span>]<br><span class="hljs-attr">manage_template</span> =&gt; <span class="hljs-keyword">false</span><br><span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>            <span class="hljs-attr">user</span> =&gt; <span class="hljs-string">&quot;elastic&quot;</span><br>            <span class="hljs-attr">password</span> =&gt; <span class="hljs-string">&quot;elastic2021&quot;</span><br>        &#125;<br>&#125;<br><span class="hljs-comment"># 应用系统日志</span><br>if[type] == <span class="hljs-string">&quot;application-log&quot;</span>&#123;<br><span class="hljs-keyword">elasticsearch</span> &#123;<br><span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.X.X:9200&quot;</span>]   <br><span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;application-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="hljs-attr">user</span> =&gt; <span class="hljs-string">&quot;elastic&quot;</span><br><span class="hljs-attr">password</span> =&gt; <span class="hljs-string">&quot;elastic2021&quot;</span><br>&#125;<br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="启动服务-2"><a href="#启动服务-2" class="headerlink" title="启动服务"></a>启动服务</h1><p>运行下面的命令：<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">nohup .<span class="hljs-regexp">/bin/</span>logstash -f config/logstash-sample.conf<br></code></pre></td></tr></table></figure></p><h1 id="配置logback环境"><a href="#配置logback环境" class="headerlink" title="配置logback环境"></a>配置logback环境</h1><h2 id="配置pom配置文件"><a href="#配置pom配置文件" class="headerlink" title="配置pom配置文件"></a>配置pom配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- logstash 7.9 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.logstash.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置logback-spring-xml"><a href="#配置logback-spring-xml" class="headerlink" title="配置logback-spring.xml"></a>配置logback-spring.xml</h2><figure class="highlight dust"><table><tr><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 为logstash输出的JSON格式的Appender --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logstash_dev&quot;</span></span></span><br><span class="xml">  class=&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span>192.168.X.X:21021<span class="hljs-tag">&lt;/<span class="hljs-name">destination</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 日志输出编码 --&gt;</span></span><br><span class="xml">&lt;encoder</span><br><span class="xml">class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">providers</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">timestamp</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">timeZone</span>&gt;</span>UTC<span class="hljs-tag">&lt;/<span class="hljs-name">timeZone</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">timestamp</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">&quot;severity&quot;: &quot;%level&quot;,</span><br><span class="hljs-template-variable">&quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;</span><span class="xml">&quot;,</span><br><span class="xml">&quot;trace&quot;: &quot;%X</span><span class="hljs-template-variable">&#123;X-B3-TraceId:-&#125;</span><span class="xml">&quot;,</span><br><span class="xml">&quot;span&quot;: &quot;%X</span><span class="hljs-template-variable">&#123;X-B3-SpanId:-&#125;</span><span class="xml">&quot;,</span><br><span class="xml">&quot;parent&quot;: &quot;%X</span><span class="hljs-template-variable">&#123;X-B3-ParentSpanId:-&#125;</span><span class="xml">&quot;,</span><br><span class="xml">&quot;exportable&quot;: &quot;%X</span><span class="hljs-template-variable">&#123;X-Span-Export:-&#125;</span><span class="xml">&quot;,</span><br><span class="xml">&quot;pid&quot;: &quot;$</span><span class="hljs-template-variable">&#123;PID:-&#125;</span><span class="xml">&quot;,</span><br><span class="xml">&quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="xml">&quot;class&quot;: &quot;%logger&quot;,</span><br><span class="xml">&quot;rest&quot;: &quot;%message&quot;</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">providers</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;develop&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!--设置根日志级别--&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logstash_dev&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><h1 id="下载-3"><a href="#下载-3" class="headerlink" title="下载"></a>下载</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/medcl/</span>elasticsearch-analysis-ik<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v7.9.3/</span>elasticsearch-analysis-ik-<span class="hljs-number">7.9</span>.<span class="hljs-number">3</span>.zip<br></code></pre></td></tr></table></figure><h2 id="移动到指定文件解压"><a href="#移动到指定文件解压" class="headerlink" title="移动到指定文件解压"></a>移动到指定文件解压</h2><p>如果没有ik文件夹，可以手动创建<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cd es<span class="hljs-regexp">/plugins/i</span>k<br>unzip es-ik-xxx.zip<br></code></pre></td></tr></table></figure></p><h1 id="重启es服务并验证"><a href="#重启es服务并验证" class="headerlink" title="重启es服务并验证"></a>重启es服务并验证</h1><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">POST _analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;我爱我的钱&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>注意在运行两个服务的时候，由于es与kibana是基于java和node运行，因此占用内存较大，如果发生服务自动关闭，可能是内存占用较高导致。<br>需要调整es和kibana的内存占用，因为这两者在运行的时候后需要虚拟机的支持。<br>分别在他们的目录下的<code>config</code>下的<code>xx.option</code>去降低内存占用即可。</p>]]></content>
    
    
    <summary type="html">讨论Spring基础知识</summary>
    
    
    
    <category term="分布式搜索" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="es" scheme="http://example.com/tags/es/"/>
    
    <category term="分布式搜索" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>ELK学习</title>
    <link href="http://example.com/2022/08/02/ELK/"/>
    <id>http://example.com/2022/08/02/ELK/</id>
    <published>2022-08-02T15:13:44.000Z</published>
    <updated>2022-09-01T08:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>ELK包括Elasticsearch（搜索分析）、Logstash（数据抽取）、Kibana（数据展现）三个开源软件的组成的一个整体。也称为ELK stack。</p><h1 id="1-1-Elastic-Stack简介"><a href="#1-1-Elastic-Stack简介" class="headerlink" title="1.1 Elastic Stack简介"></a>1.1 Elastic Stack简介</h1><ul><li>Elasticsearch是一个基于Lucene的搜索服务器</li><li>提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口</li><li>根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene</li></ul><h1 id="1-2-es特点"><a href="#1-2-es特点" class="headerlink" title="1.2 es特点"></a>1.2 es特点</h1><h2 id="1-2-1-海量数据处理"><a href="#1-2-1-海量数据处理" class="headerlink" title="1.2.1 海量数据处理"></a>1.2.1 海量数据处理</h2><h2 id="1-2-2-开箱即用"><a href="#1-2-2-开箱即用" class="headerlink" title="1.2.2 开箱即用"></a>1.2.2 开箱即用</h2><h2 id="1-2-3-作为传统数据库的补充"><a href="#1-2-3-作为传统数据库的补充" class="headerlink" title="1.2.3 作为传统数据库的补充"></a>1.2.3 作为传统数据库的补充</h2><ul><li>传统关系型数据库不擅长全文检索（MySQL自带的全文索引，与ES性能差距非常大）</li><li>传统关系型数据库无法支持搜索排名、海量数据存储、分析等功能</li><li>Elasticsearch可以作为传统关系数据库的补充，提供RDBM无法提供的功能</li></ul><h2 id="1-2-4-ElasticSearch对比Solr"><a href="#1-2-4-ElasticSearch对比Solr" class="headerlink" title="1.2.4 ElasticSearch对比Solr"></a>1.2.4 ElasticSearch对比Solr</h2><ul><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li><li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li><li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch</li></ul><h1 id="1-3-Lucene全文搜索库"><a href="#1-3-Lucene全文搜索库" class="headerlink" title="1.3 Lucene全文搜索库"></a>1.3 Lucene全文搜索库</h1><h2 id="1-3-1-全文检索"><a href="#1-3-1-全文检索" class="headerlink" title="1.3.1 全文检索"></a>1.3.1 全文检索</h2><h3 id="1-结构化数据与非结构化数据"><a href="#1-结构化数据与非结构化数据" class="headerlink" title="1.结构化数据与非结构化数据"></a>1.结构化数据与非结构化数据</h3><ul><li>结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等</li><li>非结构化数据：指不定长或无固定格式的数据，如邮件，word文档等磁盘上的文件</li></ul><h3 id="2-搜索结构化数据和非结构化数据"><a href="#2-搜索结构化数据和非结构化数据" class="headerlink" title="2.搜索结构化数据和非结构化数据"></a>2.搜索结构化数据和非结构化数据</h3><ul><li>使用SQL语言专门搜索结构化的数据</li><li>使用ES/Lucene/Solor建立倒排索引，根据关键字就可以搜索一些非结构化的数据</li></ul><h3 id="3-全文检索"><a href="#3-全文检索" class="headerlink" title="3.全文检索"></a>3.全文检索</h3><ul><li>通过一个程序扫描文本中的每一个单词，针对单词建立索引，并保存该单词在文本中的位置、以及出现的次数</li><li>用户查询时，通过之前建立好的索引来查询，将索引中单词对应的文本位置、出现的次数返回给用户，因为有了具体文本的位置，所以就可以将具体内容读取出来了</li><li>类似于通过字典中的检索字表查字的过程</li></ul><h2 id="1-3-2-分词器与中文分词器"><a href="#1-3-2-分词器与中文分词器" class="headerlink" title="1.3.2 分词器与中文分词器"></a>1.3.2 分词器与中文分词器</h2><p>分词器是指将一段文本，分割成为一个个的词语的动作。例如：按照停用词进行分隔（的、地、啊、吧、标点符号等）。我们之前在代码中使用的分词器是Lucene中自带的分词器。这个分词器对中文很不友好，只是将一个一个字分出来，所以，就会从后出现上面的问题——无法搜索词语。</p><h2 id="1-3-3-倒排索引结构"><a href="#1-3-3-倒排索引结构" class="headerlink" title="1.3.3 倒排索引结构"></a>1.3.3 倒排索引结构</h2><p>倒排索引是一种建立索引的方法。是全文检索系统中常用的数据结构。通过倒排索引，就是根据单词快速获取包含这个单词的文档列表。倒排索引通常由两个部分组成：单词词典、文档。<br><img src="/img/es/0.png" alt="github"></p><h2 id="1-3-4-企业中为什么不直接使用Lucene"><a href="#1-3-4-企业中为什么不直接使用Lucene" class="headerlink" title="1.3.4 企业中为什么不直接使用Lucene"></a>1.3.4 企业中为什么不直接使用Lucene</h2><ul><li>Lucene的内建不支持分布式<ul><li>Lucene是作为嵌入的类库形式使用的，本身是没有对分布式支持。</li></ul></li><li>区间范围搜索速度非常缓慢<ul><li>Lucene的区间范围搜索API是扩展补充的，对于在单个文档中term出现比较多的情况，搜索速度会变得很慢</li><li>Lucene只有在数据生成索引文件之后（Segment），才能被查询到，做不到实时</li></ul></li><li>可靠性无法保障<ul><li>无法保障Segment索引段的可靠性</li></ul></li></ul><h1 id="1-4-Elasticsearch中的核心概念"><a href="#1-4-Elasticsearch中的核心概念" class="headerlink" title="1.4    Elasticsearch中的核心概念"></a>1.4    Elasticsearch中的核心概念</h1><h2 id="1-4-1-索引-index"><a href="#1-4-1-索引-index" class="headerlink" title="1.4.1 索引 index"></a>1.4.1 索引 index</h2><ul><li>一个索引就是一个拥有几分相似特征的文档的集合。比如说，可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引</li><li>一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字</li><li>在一个集群中，可以定义任意多的索引。</li></ul><h2 id="1-4-2-映射-mapping"><a href="#1-4-2-映射-mapping" class="headerlink" title="1.4.2 映射 mapping"></a>1.4.2 映射 mapping</h2><ul><li>ElasticSearch中的映射（Mapping）用来定义一个文档</li><li>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的</li></ul><h2 id="1-4-3-字段Field"><a href="#1-4-3-字段Field" class="headerlink" title="1.4.3 字段Field"></a>1.4.3 字段Field</h2><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p><h2 id="1-4-4-类型-Type"><a href="#1-4-4-类型-Type" class="headerlink" title="1.4.4 类型 Type"></a>1.4.4 类型 Type</h2><p>每一个字段都应该有一个对应的类型，例如：Text、Keyword、Byte等</p><h2 id="1-4-5-文档-document"><a href="#1-4-5-文档-document" class="headerlink" title="1.4.5 文档 document"></a>1.4.5 文档 document</h2><ul><li>一个文档是一个可被索引的基础信息单元。比如，可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式</li></ul><h2 id="1-4-6-集群-cluster"><a href="#1-4-6-集群-cluster" class="headerlink" title="1.4.6 集群 cluster"></a>1.4.6 集群 cluster</h2><ul><li>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能</li><li>一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”</li><li>这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群</li></ul><h2 id="1-4-7-节点-node"><a href="#1-4-7-节点-node" class="headerlink" title="1.4.7 节点 node"></a>1.4.7 节点 node</h2><ul><li>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能</li><li>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中</li><li>这意味着，如果在网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中</li><li>在一个集群里，可以拥有任意多个节点。而且，如果当前网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</li></ul><h2 id="1-4-8-分片和副本-shards-amp-replicas"><a href="#1-4-8-分片和副本-shards-amp-replicas" class="headerlink" title="1.4.8 分片和副本 shards&amp;replicas"></a>1.4.8 分片和副本 shards&amp;replicas</h2><h3 id="1-分片"><a href="#1-分片" class="headerlink" title="1.分片"></a>1.分片</h3><ul><li>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢</li><li>为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片</li><li>当创建一个索引的时候，可以指定你想要的分片的数量</li><li>每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上</li><li>分片很重要，主要有两方面的原因<ul><li>允许水平分割/扩展你的内容容量</li><li>允许在分片之上进行分布式的、并行的操作，进而提高性能/吞吐量</li></ul></li><li>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户来说，这些都是透明的</li></ul><h3 id="2-副本"><a href="#2-副本" class="headerlink" title="2.副本"></a>2.副本</h3><ul><li>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做副本分片，或者直接叫副本</li><li>副本之所以重要，有两个主要原因<ul><li>在分片/节点失败的情况下，提供了高可用性。注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的</li><li>扩展搜索量/吞吐量，因为搜索可以在所有的副本上并行运行</li></ul></li><li>每个索引可以被分成多个分片。一个索引有0个或者多个副本</li><li>一旦设置了副本，每个索引就有了主分片和副本分片，分片和副本的数量可以在索引创建的时候指定</li><li>在索引创建之后，可以在任何时候动态地改变副本的数量，但是不能改变分片的数量</li></ul><h2 id="二、restful"><a href="#二、restful" class="headerlink" title="二、restful"></a>二、restful</h2><h1 id="2-1-创建索引"><a href="#2-1-创建索引" class="headerlink" title="2.1 创建索引"></a>2.1 创建索引</h1><h2 id="2-1-1-创建带有映射的索引"><a href="#2-1-1-创建带有映射的索引" class="headerlink" title="2.1.1 创建带有映射的索引"></a>2.1.1 创建带有映射的索引</h2><p>Elasticsearch中，我们可以使用RESTful API（http请求）来进行索引的各种操作。创建MySQL表的时候，我们使用DDL来描述表结构、字段、字段类型、约束等。在Elasticsearch中，我们使用Elasticsearch的DSL来定义——使用JSON来描述。例如：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">PUT /<span class="hljs-keyword">my</span>-index<br>&#123;<br>    <span class="hljs-string">&quot;mapping&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;employee-id&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="2-1-2-字段的类型"><a href="#2-1-2-字段的类型" class="headerlink" title="2.1.2 字段的类型"></a>2.1.2 字段的类型</h2><p>在Elasticsearch中，每一个字段都有一个类型（type）。以下为Elasticsearch中可以使用的类型：</p><div class="table-container"><table><thead><tr><th>分类</th><th>类型名称</th><th>说明</th></tr></thead><tbody><tr><td>简单类型</td><td>text</td><td>需要进行全文检索的字段，通常使用text类型来对应邮件的正文、产品描述或者短文等非结构化文本数据。分词器先会将文本进行分词转换为词条列表。将来就可以基于词条来进行检索了。文本字段不能用户排序、也很少用户聚合计算。</td></tr><tr><td>简单类型</td><td>keyword</td><td>使用keyword来对应结构化的数据，如ID、电子邮件地址、主机名、状态代码、邮政编码或标签。可以使用keyword来进行排序或聚合计算。注意：keyword是不能进行分词的。</td></tr><tr><td>简单类型</td><td>date</td><td>保存格式化的日期数据，例如：2015-01-01或者2015/01/01 12:10:30。在Elasticsearch中，日期都将以字符串方式展示。可以给date指定格式：”format”: “yyyy-MM-dd HH:mm:ss”</td></tr><tr><td>简单类型</td><td>long/integer/short/byte</td><td>64位整数/32位整数/16位整数/8位整数</td></tr><tr><td>简单类型</td><td>double/float/half_float</td><td>64位双精度浮点/32位单精度浮点/16位半进度浮点</td></tr><tr><td>简单类型</td><td>boolean</td><td>“true”/”false”</td></tr><tr><td>简单类型</td><td>ip</td><td>IPV4（192.168.1.110）/IPV6（192.168.0.0/16）</td></tr><tr><td>JSON分层嵌套类型</td><td>object</td><td>用于保存JSON对象</td></tr><tr><td>JSON分层嵌套类型</td><td>nested</td><td>用于保存JSON数组</td></tr><tr><td>特殊类型</td><td>geo_point</td><td>用于保存经纬度坐标</td></tr><tr><td>特殊类型</td><td>geo_shape</td><td>用于保存地图上的多边形坐标</td></tr></tbody></table></div><h2 id="2-1-3-创建保存职位信息的索引"><a href="#2-1-3-创建保存职位信息的索引" class="headerlink" title="2.1.3 创建保存职位信息的索引"></a>2.1.3 创建保存职位信息的索引</h2><ol><li>使用PUT发送PUT请求</li><li>索引名为 /job_idx</li><li>判断是使用text、还是keyword，主要就看是否需要分词</li></ol><div class="table-container"><table><thead><tr><th>字段</th><th>类型</th></tr></thead><tbody><tr><td>area</td><td>text</td></tr><tr><td>exp</td><td>text</td></tr><tr><td>edu</td><td>keyword</td></tr><tr><td>salary</td><td>keyword</td></tr><tr><td>job_type</td><td>keyword</td></tr><tr><td>cmp</td><td>text</td></tr><tr><td>pv</td><td>keyword</td></tr><tr><td>title</td><td>text</td></tr><tr><td>jd</td><td>text</td></tr></tbody></table></div><p>创建索引：<br><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">PUT /job_idx<br>&#123;<br>    <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;area&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;exp&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;edu&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;salary&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;job_type&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;cmp&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;pv&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;title&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;jd&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="2-1-4-查看索引映射"><a href="#2-1-4-查看索引映射" class="headerlink" title="2.1.4 查看索引映射"></a>2.1.4 查看索引映射</h2><p>使用GET请求查看索引映射<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 查看索引映射<br>GET <span class="hljs-regexp">/job_idx/</span>_mapping<br></code></pre></td></tr></table></figure><br>使用head插件也可以查看到索引映射信息。</p><h2 id="2-1-5-查看Elasticsearch中的所有索引"><a href="#2-1-5-查看Elasticsearch中的所有索引" class="headerlink" title="2.1.5 查看Elasticsearch中的所有索引"></a>2.1.5 查看Elasticsearch中的所有索引</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> _cat/indices<br></code></pre></td></tr></table></figure><h2 id="2-1-6-删除索引"><a href="#2-1-6-删除索引" class="headerlink" title="2.1.6 删除索引"></a>2.1.6 删除索引</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">delete</span> /job_idx<br></code></pre></td></tr></table></figure><h2 id="2-1-7-指定使用IK分词器"><a href="#2-1-7-指定使用IK分词器" class="headerlink" title="2.1.7 指定使用IK分词器"></a>2.1.7 指定使用IK分词器</h2><p>因为存放在索引库中的数据，是以中文的形式存储的。所以，为了有更好地分词效果，我们需要使用IK分词器来进行分词。这样，将来搜索的时候才会更准确。<br><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">PUT /job_idx<br>&#123;<br>    <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;area&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;,<br>            <span class="hljs-string">&quot;exp&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;,<br>            <span class="hljs-string">&quot;edu&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;salary&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;job_type&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;cmp&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;,<br>            <span class="hljs-string">&quot;pv&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>&#125;,<br>            <span class="hljs-string">&quot;title&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;,<br>            <span class="hljs-string">&quot;jd&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="2-2-PUT请求"><a href="#2-2-PUT请求" class="headerlink" title="2.2 PUT请求"></a>2.2 PUT请求</h1><p>前面我们已经创建了索引。接下来，我们就可以往索引库中添加一些文档了。可以通过PUT请求直接完成该操作。在Elasticsearch中，每一个文档都有唯一的ID。也是使用JSON格式来描述数据。例如：<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/customer/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><ul><li>如果在customer中，不存在ID为1的文档，Elasticsearch会自动创建</li></ul><h2 id="2-2-1-添加职位信息请求"><a href="#2-2-1-添加职位信息请求" class="headerlink" title="2.2.1 添加职位信息请求"></a>2.2.1 添加职位信息请求</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/job_idx/</span>_doc/<span class="hljs-number">29097</span><br>&#123;<br>    <span class="hljs-string">&quot;area&quot;</span>: <span class="hljs-string">&quot;深圳-南山区&quot;</span>,<br>    <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-string">&quot;1年经验&quot;</span>,<br>    <span class="hljs-string">&quot;edu&quot;</span>: <span class="hljs-string">&quot;大专以上&quot;</span>,<br>    <span class="hljs-string">&quot;salary&quot;</span>: <span class="hljs-string">&quot;6-8千/月&quot;</span>,<br>    <span class="hljs-string">&quot;job_type&quot;</span>: <span class="hljs-string">&quot;实习&quot;</span>,<br>    <span class="hljs-string">&quot;cmp&quot;</span>: <span class="hljs-string">&quot;乐有家&quot;</span>,<br>    <span class="hljs-string">&quot;pv&quot;</span>: <span class="hljs-string">&quot;61.6万人浏览过  / 14人评价  / 113人正在关注&quot;</span>,<br>    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;桃园 深大销售实习 岗前培训&quot;</span>,<br>    <span class="hljs-string">&quot;jd&quot;</span>: <span class="hljs-string">&quot;fdsajflsjfdla&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Elasticsearch响应结果：<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;job_idx&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;29097&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="2-3-修改职位薪资"><a href="#2-3-修改职位薪资" class="headerlink" title="2.3 修改职位薪资"></a>2.3 修改职位薪资</h1><h2 id="2-3-1-执行update操作"><a href="#2-3-1-执行update操作" class="headerlink" title="2.3.1 执行update操作"></a>2.3.1 执行update操作</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/job_idx/</span>_update/<span class="hljs-number">29097</span><br>&#123;<br>    <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;salary&quot;</span>: <span class="hljs-string">&quot;15-20千/月&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-2-删除一个职位数据"><a href="#2-3-2-删除一个职位数据" class="headerlink" title="2.3.2 删除一个职位数据"></a>2.3.2 删除一个职位数据</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/job_idx/</span>_doc/<span class="hljs-number">29097</span><br></code></pre></td></tr></table></figure><h1 id="2-4-批量导入JSON数据"><a href="#2-4-批量导入JSON数据" class="headerlink" title="2.4 批量导入JSON数据"></a>2.4 批量导入JSON数据</h1><h2 id="2-4-1-bulk导入"><a href="#2-4-1-bulk导入" class="headerlink" title="2.4.1 bulk导入"></a>2.4.1 bulk导入</h2><p>为了方便后面的测试，我们需要先提前导入一些测试数据到ES中。在资料文件夹中有一个job_info.json数据文件。我们可以使用Elasticsearch中自带的bulk接口来进行数据导入。</p><ol><li>上传JSON数据文件到Linux</li><li>执行导入命令<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">curl</span> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -XPOST <span class="hljs-string">&quot;node1.itcast.cn:9200/job_idx/_bulk?pretty&amp;refresh&quot;</span> --<span class="hljs-meta">data</span>-binary <span class="hljs-string">&quot;@job_info.json&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-4-2-查看索引状态"><a href="#2-4-2-查看索引状态" class="headerlink" title="2.4.2 查看索引状态"></a>2.4.2 查看索引状态</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> _cat/indices?<span class="hljs-attribute">index</span>=job_idx<br></code></pre></td></tr></table></figure><p>通过执行以上请求，Elasticsearch返回数据如下：<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<br>    &#123;<br>        <span class="hljs-attr">&quot;health&quot;</span>: <span class="hljs-string">&quot;green&quot;</span>,<br>        <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-string">&quot;open&quot;</span>,<br>        <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;job_idx&quot;</span>,<br>        <span class="hljs-attr">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;Yucc7A-TRPqnrnBg5SCfXw&quot;</span>,<br>        <span class="hljs-attr">&quot;pri&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;rep&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;docs.count&quot;</span>: <span class="hljs-string">&quot;6765&quot;</span>,<br>        <span class="hljs-attr">&quot;docs.deleted&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>        <span class="hljs-attr">&quot;store.size&quot;</span>: <span class="hljs-string">&quot;23.1mb&quot;</span>,<br>        <span class="hljs-attr">&quot;pri.store.size&quot;</span>: <span class="hljs-string">&quot;11.5mb&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure></p><h1 id="2-5-5-7-根据ID检索指定职位数据"><a href="#2-5-5-7-根据ID检索指定职位数据" class="headerlink" title="2.5 5.7     根据ID检索指定职位数据"></a>2.5 5.7     根据ID检索指定职位数据</h1><p>在Elasticsearch中，可以通过发送GET请求来实现文档的查询。<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/job_idx/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;values&quot;</span>: [<span class="hljs-string">&quot;46313&quot;</span>]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="2-6-根据关键字搜索数据"><a href="#2-6-根据关键字搜索数据" class="headerlink" title="2.6 根据关键字搜索数据"></a>2.6 根据关键字搜索数据</h1><p>检索jd中销售相关的岗位<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET  <span class="hljs-regexp">/job_idx/</span>_search <br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;jd&quot;</span>: <span class="hljs-string">&quot;销售&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>除了检索职位描述字段以外，我们还需要检索title中包含销售相关的职位，所以，我们需要进行多字段的组合查询。<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET  <span class="hljs-regexp">/job_idx/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;销售&quot;</span>,<br>            <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;jd&quot;</span>]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="2-7-根据关键字分页搜索"><a href="#2-7-根据关键字分页搜索" class="headerlink" title="2.7 根据关键字分页搜索"></a>2.7 根据关键字分页搜索</h1><p>在存在大量数据时，一般我们进行查询都需要进行分页查询。例如：我们指定页码、并指定每页显示多少条数据，然后Elasticsearch返回对应页码的数据。</p><h2 id="2-7-1-使用from和size来进行分页"><a href="#2-7-1-使用from和size来进行分页" class="headerlink" title="2.7.1     使用from和size来进行分页"></a>2.7.1     使用from和size来进行分页</h2><p>在执行查询时，可以指定from（从第几条数据开始查起）和size（每页返回多少条）数据，就可以轻松完成分页。</p><p><code>from = (page – 1) * size</code><br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET  <span class="hljs-regexp">/job_idx/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;销售&quot;</span>,<br>            <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;jd&quot;</span>]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="2-7-2-使用scroll方式进行分页"><a href="#2-7-2-使用scroll方式进行分页" class="headerlink" title="2.7.2 使用scroll方式进行分页"></a>2.7.2 使用scroll方式进行分页</h2><p>前面使用from和size方式，查询在1W-5W条数据以内都是OK的，但如果数据比较多的时候，会出现性能问题。Elasticsearch做了一个限制，不允许查询的是10000条以后的数据。如果要查询1W条以后的数据，需要使用Elasticsearch中提供的scroll游标来查询。</p><p>在进行大量分页时，每次分页都需要将要查询的数据进行重新排序，这样非常浪费性能。使用scroll是将要用的数据一次性排序好，然后分批取出。性能要比from + size好得多。使用scroll查询后，排序后的数据会保持一定的时间，后续的分页查询都从该快照取数据即可。</p><h3 id="1-第一次使用scroll分页查询"><a href="#1-第一次使用scroll分页查询" class="headerlink" title="1.第一次使用scroll分页查询"></a>1.第一次使用scroll分页查询</h3><p>此处，我们让排序的数据保持1分钟，所以设置scroll为1m<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /job_idx/_search?<span class="hljs-attribute">scroll</span>=1m<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;销售&quot;</span>,<br>            <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;jd&quot;</span>]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;size&quot;</span>: 100<br>&#125;<br></code></pre></td></tr></table></figure><br>执行后，我们注意到，在响应结果中有一项：<br><code>_scroll_id&quot;: &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAGgWT3NxUFZ2OXVRVjZ0bEIxZ0RGUjMtdw==</code><br>后续，我们需要根据这个<code>_scroll_id</code>来进行查询</p><h3 id="2-第二次直接使用scroll-id进行查询"><a href="#2-第二次直接使用scroll-id进行查询" class="headerlink" title="2.第二次直接使用scroll id进行查询"></a>2.第二次直接使用scroll id进行查询</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> _search/scroll?<span class="hljs-attribute">scroll</span>=1m<br>&#123;<br>    <span class="hljs-string">&quot;scroll_id&quot;</span>: <span class="hljs-string">&quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAHEWS0VWb2dKZTVUZVdKMWJmS3lWQVY3QQ==&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-8-统计分析案例"><a href="#2-8-统计分析案例" class="headerlink" title="2.8 统计分析案例"></a>2.8 统计分析案例</h1><h2 id="2-8-1-案例介绍"><a href="#2-8-1-案例介绍" class="headerlink" title="2.8 1 案例介绍"></a>2.8 1 案例介绍</h2><p>有以下数据集：</p><div class="table-container"><table><thead><tr><th>订单ID</th><th>订单状态</th><th>支付金额</th><th>支付方式ID</th><th>用户ID</th><th>操作时间</th><th>商品分类</th></tr></thead><tbody><tr><td>id</td><td>status</td><td>pay_money</td><td>payway</td><td>userid</td><td>operation_date</td><td>category</td></tr><tr><td>1</td><td>已提交</td><td>4070</td><td>1</td><td>4944191</td><td>2020-04-25 12:09:16</td><td>手机</td></tr><tr><td>2</td><td>已完成</td><td>4350</td><td>1</td><td>1625615</td><td>2020-04-25 12:09:37</td><td>家用电器,电脑</td></tr><tr><td>3</td><td>已提交</td><td>6370</td><td>3</td><td>3919700</td><td>2020-04-25 12:09:39</td><td>男装,男鞋</td></tr><tr><td>4</td><td>已付款</td><td>6370</td><td>3</td><td>3919700</td><td>2020-04-25 12:09:44</td><td>男装,男鞋</td></tr></tbody></table></div><p>我们需要基于按数据，使用Elasticsearch中的聚合统计功能，实现一些指标统计。</p><h2 id="2-8-2-创建索引"><a href="#2-8-2-创建索引" class="headerlink" title="2.8.2 创建索引"></a>2.8.2 创建索引</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">PUT <span class="hljs-regexp">/order_idx/</span><br>&#123;<br>    <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;status&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;pay_money&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span>,<br>                <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;payway&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;byte&quot;</span>,<br>                <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;userid&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;operation_date&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>                <span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,<br>                <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;category&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;store&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-8-3-导入测试数据"><a href="#2-8-3-导入测试数据" class="headerlink" title="2.8.3 导入测试数据"></a>2.8.3 导入测试数据</h2><ol><li>上传资料中的order_data.json数据文件到Linux</li><li>使用bulk进行批量导入命令</li></ol><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">curl</span> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -XPOST <span class="hljs-string">&quot;node1.itcast.cn:9200/order_idx/_bulk?pretty&amp;refresh&quot;</span> --<span class="hljs-meta">data</span>-binary <span class="hljs-string">&quot;@order_data.json&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-8-4-统计不同支付方式的的订单数量"><a href="#2-8-4-统计不同支付方式的的订单数量" class="headerlink" title="2.8.4 统计不同支付方式的的订单数量"></a>2.8.4 统计不同支付方式的的订单数量</h2><h3 id="1-使用JSON-DSL的方式来实现"><a href="#1-使用JSON-DSL的方式来实现" class="headerlink" title="1.使用JSON DSL的方式来实现"></a>1.使用JSON DSL的方式来实现</h3><p>这种方式就是用Elasticsearch原生支持的基于JSON的DSL方式来实现聚合统计。<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/order_idx/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;group_by_state&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;payway&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>统计结果：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">&quot;aggregations&quot;:</span> &#123;<br>    <span class="hljs-attr">&quot;group_by_state&quot;:</span> &#123;<br>        <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;:</span> <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;sum_other_doc_count&quot;:</span> <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;buckets&quot;:</span> [<br>            &#123;<br>                <span class="hljs-attr">&quot;key&quot;:</span> <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;doc_count&quot;:</span> <span class="hljs-number">1496</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;key&quot;:</span> <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;doc_count&quot;:</span> <span class="hljs-number">1438</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;key&quot;:</span> <span class="hljs-number">3</span>,<br>                <span class="hljs-attr">&quot;doc_count&quot;:</span> <span class="hljs-number">1183</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;key&quot;:</span> <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">&quot;doc_count&quot;:</span> <span class="hljs-number">883</span><br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>这种方式分析起来比较麻烦，如果将来我们都是写这种方式来分析数据，简直是无法忍受。所以，Elasticsearch想要进军实时OLAP领域，是一定要支持SQL，能够使用SQL方式来进行统计和分析的。</p><h3 id="2-基于Elasticsearch-SQL方式实现"><a href="#2-基于Elasticsearch-SQL方式实现" class="headerlink" title="2.基于Elasticsearch SQL方式实现"></a>2.基于Elasticsearch SQL方式实现</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">GET /_sql?format=txt<br>&#123;<br>    &quot;query&quot;: &quot;<span class="hljs-keyword">select</span> payway, <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">as</span> order_cnt <span class="hljs-keyword">from</span> order_idx <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> payway<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>这种方式要更加直观、简洁。</p><h1 id="2-8-批量操作"><a href="#2-8-批量操作" class="headerlink" title="2.8 批量操作"></a>2.8 批量操作</h1><h2 id="2-8-1-bulk导入"><a href="#2-8-1-bulk导入" class="headerlink" title="2.8.1     bulk导入"></a>2.8.1     bulk导入</h2><p>为了方便后面的测试，我们需要先提前导入一些测试数据到ES中。在资料文件夹中有一个job_info.json数据文件。我们可以使用Elasticsearch中自带的bulk接口来进行数据导入。<br>语法<br><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">POST /_bulk<br>&#123; <span class="hljs-string">&quot;action&quot;</span>: &#123; <span class="hljs-string">&quot;metadate&quot;</span> &#125; &#125;<br>&#123; <span class="hljs-string">&quot;data&quot;</span> &#125;<br></code></pre></td></tr></table></figure><br>如<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;create&quot;</span>: &#123; <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;text_index&quot;</span>, <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;8&quot;</span> &#125; &#125;<br>&#123; <span class="hljs-attr">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;test9&quot;</span> &#125;<br></code></pre></td></tr></table></figure></p><p>总结</p><ol><li>功能</li></ol><ul><li>delete: 删除一个文档，只要1个json串就可以</li><li>create: 相当于强制创建，PUT /index/type/id/_create</li><li>index: 普通的put操作，可以是创建文档，也可以是全量替换文件</li><li>update: 执行的是局部更新partial update操作</li></ul><ol><li>格式: 每个json不能换行。相邻json必须换行。</li><li>隔离: 每个操作互不影响。操作失败的行会返回其失败信息。</li><li>实际用法: bulk请求一次不要太大，否则一下积压到内存中，性能会下降。所以，一次请求几千个操作、大小在几m正好。</li></ol><h2 id="三、分布式"><a href="#三、分布式" class="headerlink" title="三、分布式"></a>三、分布式</h2><h1 id="3-1-分布式基础"><a href="#3-1-分布式基础" class="headerlink" title="3.1 分布式基础"></a>3.1 分布式基础</h1><h2 id="3-1-1-es对复杂分布式机制的透明隐藏特性"><a href="#3-1-1-es对复杂分布式机制的透明隐藏特性" class="headerlink" title="3.1.1 es对复杂分布式机制的透明隐藏特性"></a>3.1.1 es对复杂分布式机制的透明隐藏特性</h2><ul><li>分布式机制：分布式数据存储及共享</li><li>分片机制：数据存储到哪个分片，副本数据写入。</li><li>集群发现机制：cluster discovery。新启动es实例，自动加入集群。</li><li>shard负载均衡：大量数据写入及查询，es会将数据平均分配。</li><li>shard副本：新增副本数，分片重分配。</li></ul><h2 id="3-1-2-es的垂直扩容与水平扩容"><a href="#3-1-2-es的垂直扩容与水平扩容" class="headerlink" title="3.1.2 es的垂直扩容与水平扩容"></a>3.1.2 es的垂直扩容与水平扩容</h2><ul><li>垂直扩容：使用更加强大的服务器代替老服务器，但单机存储及运算能力有上线，且成本直线上升。</li><li>水平扩容：采购更多服务器，加入集群，大数据。</li></ul><h2 id="3-1-3-增减或减少节点时的数据rebalance"><a href="#3-1-3-增减或减少节点时的数据rebalance" class="headerlink" title="3.1.3 增减或减少节点时的数据rebalance"></a>3.1.3 增减或减少节点时的数据rebalance</h2><p>新增或减少es实例时，es集群会将数据重新分配。</p><h2 id="3-1-4-master节点"><a href="#3-1-4-master节点" class="headerlink" title="3.1.4 master节点"></a>3.1.4 master节点</h2><p>功能：</p><ul><li>创建删除节点</li><li>创建删除索引</li></ul><h2 id="3-1-5-节点对等的分布式架构"><a href="#3-1-5-节点对等的分布式架构" class="headerlink" title="3.1.5 节点对等的分布式架构"></a>3.1.5 节点对等的分布式架构</h2><ul><li>节点对等，每个节点都能接收所有的请求</li><li>自动请求路由</li><li>响应收集</li></ul><h1 id="3-2-分片shard、副本replica机制"><a href="#3-2-分片shard、副本replica机制" class="headerlink" title="3.2 分片shard、副本replica机制"></a>3.2 分片shard、副本replica机制</h1><ol><li>每个index包含一个或多个shard</li><li>每个shard都是一个最小工作单元，承载部分数据，lucene实例，完整的建立索引和处理请求的能力</li><li>增减节点时，shard会自动在nodes中负载均衡</li><li>primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard</li><li>replica shard是primary shard的副本，负责容错，以及承担读请求负载</li><li>primary shard的数量在创建索引的时候就固定了，replica shard 的数量可以随时修改</li><li>primary shard 的默认数量是1，replica默认是1，默认共有两个shard，1个primary shard，1个replica shard（注意：es7以前primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard）</li><li>primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上</li></ol><h2 id="3-2-1-实例1"><a href="#3-2-1-实例1" class="headerlink" title="3.2.1 实例1"></a>3.2.1 实例1</h2><ol><li>单个node环境中，创建一个index，有3个primary，3个replica</li><li>集群status是yellow</li><li>这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的</li><li>集群是可以工作的，但是一旦出现节点宕机，数据全部丢失，且集群不可用，无法承接任何请求</li></ol><h2 id="3-2-2-实例2"><a href="#3-2-2-实例2" class="headerlink" title="3.2.2 实例2"></a>3.2.2 实例2</h2><ol><li>replica shard 分配；3个primary shard，1个replica shard，2个node</li><li>同步：primary <code>--&gt;</code> replica</li><li>读请求：primary/replica</li></ol><h2 id="3-3-横向扩容"><a href="#3-3-横向扩容" class="headerlink" title="3.3 横向扩容"></a>3.3 横向扩容</h2><ul><li>分片自动负载均衡，分配向空闲机器转移</li><li>每个节点存储更少分配，系统资源给予每个分片的资源更多，整体集群性能提高</li><li>扩容极限：节点数大于整体分片数，则必有空闲机器</li><li>超出扩容极限时，可以增加副本数为2，总共3x3=9个分片。9台机器同时运行，存储和搜索性能更强，容错性更好</li><li>容错性：只要一个索引的所有主分片在，集群就可以运行</li></ul><h2 id="3-4-es容错机制master选举，replica容错，数据恢复"><a href="#3-4-es容错机制master选举，replica容错，数据恢复" class="headerlink" title="3.4 es容错机制master选举，replica容错，数据恢复"></a>3.4 es容错机制master选举，replica容错，数据恢复</h2><p>以3分配，2副本数，3节点为例介绍</p><ul><li>master node宕机，自动master选举，集群为red</li><li>replica容错：新master将replica提升为primary shard，yellow</li><li>重启宕机node，master copy replica到该node，使用原有的 shard并同步宕机后的修改，green</li></ul><h2 id="四、文档存储机制"><a href="#四、文档存储机制" class="headerlink" title="四、文档存储机制"></a>四、文档存储机制</h2><h1 id="4-1-数据路由"><a href="#4-1-数据路由" class="headerlink" title="4.1 数据路由"></a>4.1 数据路由</h1><h2 id="4-1-1-文档存储如何路由到相应分片"><a href="#4-1-1-文档存储如何路由到相应分片" class="headerlink" title="4.1.1 文档存储如何路由到相应分片"></a>4.1.1 文档存储如何路由到相应分片</h2><p>一个文档，最终会落在主分片的一个分片上，到底应该在哪个分片，这就是数据路由。</p><h2 id="4-1-2-路由算法"><a href="#4-1-2-路由算法" class="headerlink" title="4.1.2 路由算法"></a>4.1.2 路由算法</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">shard = hash<span class="hljs-comment">(routing)</span> <span class="hljs-meta">%</span> <span class="hljs-symbol">number_of_primary_shards</span><br></code></pre></td></tr></table></figure><p>哈希值对主分片数去模</p><p><strong>举例：</strong><br>对一个文档进行crud时，都会带有一个路由值 routing number。默认文档_id（可能是手动指定，可能是自动生成）。</p><p>存储1号文档，经过哈希计算，哈希值为2，此索引有3个主分片，那么计算<code>2%3=2</code>，就算出此文档在P2分片上。</p><p>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的。<br>无论hash值是多少，对number_of_premary_shards求余数，结果一定是0-number_of_primary_shards-1之间这个范围内的。</p><h2 id="4-1-3-手动指定-routing-key"><a href="#4-1-3-手动指定-routing-key" class="headerlink" title="4.1.3 手动指定 routing key"></a>4.1.3 手动指定 routing key</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">15</span>?routing=tom<br>&#123;<br>  <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;tom&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>场景：在程序中，架构师可以手动指定已有数据的一个属性为路由值，好处是可以定制一类文档数据存储到一个分片中，缺点是设计不好，会造成数据倾斜。<br>所以，不同文档尽量放到不同的索引中，剩下的交给es集群。</p><h2 id="4-1-4-主分片数量不可变"><a href="#4-1-4-主分片数量不可变" class="headerlink" title="4.1.4 主分片数量不可变"></a>4.1.4 主分片数量不可变</h2><p>涉及到以往数据的查询搜索，所以一旦建立索引，主分片数不可变。</p><h1 id="4-2-文档的增删改查内部机制"><a href="#4-2-文档的增删改查内部机制" class="headerlink" title="4.2 文档的增删改查内部机制"></a>4.2 文档的增删改查内部机制</h1><p>增删改可以看作是update，都是对数据的改动。一个改动请求发送到es集群，经历一下四个步骤：</p><ol><li>客户端选择一个node发送请求过去，这个node就是coordination node（协调节点）</li><li>coordinating node，对document进行路由，将请求转发给对应的node（有primary shard）</li><li>实际的node上的primary shard处理请求，然后将数据同步到replica node</li><li>coordinating node，如果发现primary node和所有replica node都搞定之后，就返回相应结果给客户端。</li></ol><h1 id="4-3-文档的查询内部机制"><a href="#4-3-文档的查询内部机制" class="headerlink" title="4.3 文档的查询内部机制"></a>4.3 文档的查询内部机制</h1><ol><li>客户端发送请求到任意一个node，成为coordinating node</li><li>coordinating node对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮询算法，在primary shard以及其所有replica中随机选择一个，让读请求负载均衡</li><li>接收请求的node返回document给coordinating node</li><li>coordinating node 返回document给客户端</li><li>特殊情况：document如果还在建立索引过程中，可能只有primary shard有，任何一个replica shard都没有，此时可能会导致无法读取到document，但是document完成索引建立之后，primary shard和replica shard就都有了</li></ol><h1 id="4-4-bulk-api奇特的json格式"><a href="#4-4-bulk-api奇特的json格式" class="headerlink" title="4.4 bulk api奇特的json格式"></a>4.4 bulk api奇特的json格式</h1><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">POST /_bulk<br>&#123;<span class="hljs-string">&quot;action&quot;</span>: &#123;<span class="hljs-string">&quot;meta&quot;</span>&#125;&#125;\n<br>&#123;<span class="hljs-string">&quot;data&quot;</span>&#125;\n<br>&#123;<span class="hljs-string">&quot;action&quot;</span>: &#123;<span class="hljs-string">&quot;meta&quot;</span>&#125;&#125;\n<br>&#123;<span class="hljs-string">&quot;data&quot;</span>&#125;\n<br><br>[<br>  &#123;<br><br>  &#125;,<br>  &#123;<br><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><ol><li>bulk中的每个操作都可能要转发到不同的node的shard去执行</li><li>如果采用比较良好的json数组格式<br>允许任意的换行，整个可读性非常棒，读起来很爽，es拿到那种标准格式的json串以后，要按照下述流程去进行处理：<ol><li>将json数组解析为jsonarray对象，这个时候整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是jsonarray对象</li><li>解析json数组中的每个json，对每个请求中的document进行路由</li><li>为路由到同一个shard上的多个请求，创建一个请求数组。100请求中有10个是到P1</li><li>将这个请求数组序列化</li><li>将序列化后的请求数组发送到对应节点上去</li></ol></li><li><p>消耗更多内存，更多的jvm gc开销<br>bulk size 最佳大小的问题，一般来说在几千条，然后大小在10MB左右，但是可怕的来了，假如现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB=1GB，然后每个请求的json都copy一份jsonarray对象，此时内存中的占用就会翻倍，2GB内存，甚至不止。<br>占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能极速下降。<br>另外，占用内存越多，就会导致java虚拟机的垃圾回收次数越多，更频繁，回收越多，消耗的时间越多，导致es的java虚拟机停止工作线程的时间更多。</p></li><li><p>现在的奇特格式</p><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">POST /_bulk<br>&#123;<span class="hljs-string">&quot;action&quot;</span>: &#123;<span class="hljs-string">&quot;meta&quot;</span>&#125;&#125;\n<br>&#123;<span class="hljs-string">&quot;data&quot;</span>&#125;\n<br>&#123;<span class="hljs-string">&quot;action&quot;</span>: &#123;<span class="hljs-string">&quot;meta&quot;</span>&#125;&#125;\n<br>&#123;<span class="hljs-string">&quot;data&quot;</span>&#125;\n<br></code></pre></td></tr></table></figure><ol><li>不用将其转换为json对象，不会出现内存中的相同数据的拷贝，而是直接切割json</li><li>对每两个一组的json，读取meta，进行document路由</li><li>直接将对应的json发送到node上去</li></ol></li><li><p>最大的优势在于，不需要将json数组解析为一个jsonarray对象，形成一份大数据拷贝，浪费内存空间，尽可能的保证性能。</p></li></ol><h2 id="五、Mapping映射入门"><a href="#五、Mapping映射入门" class="headerlink" title="五、Mapping映射入门"></a>五、Mapping映射入门</h2><h1 id="5-1-什么是mapping映射"><a href="#5-1-什么是mapping映射" class="headerlink" title="5.1 什么是mapping映射"></a>5.1 什么是mapping映射</h1><p>概念：自动或手动为index中的<code>_doc</code>建立的一种数据结构和相关配置，简称为mapping映射。</p><p>插入下面几条数据，让es自动为我们建立索引<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;post_data&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my first article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is xxxxx&quot;</span>,<br>  <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">114400</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;post_data&quot;</span>: <span class="hljs-string">&quot;2019-01-02&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my second article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is xxxxx&quot;</span>,<br>  <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">114400</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;post_data&quot;</span>: <span class="hljs-string">&quot;2019-01-03&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my third article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is xxxxx&quot;</span>,<br>  <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">114400</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>对比数据库建表：<br><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> websit (<br>  post_data <span class="hljs-type">date</span>,<br>  title <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>  content <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>  author_id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)<br>);<br></code></pre></td></tr></table></figure><br>动态映射：dynamic mapping，自动为我们建立index，以及对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置。</p><p><strong>重点</strong>：当然也可以手动在创建数据之前，先创建index，以及对应的mapping。<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/website/</span>_mapping/<br>&#123;<br>  <span class="hljs-string">&quot;website&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;author_id&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;content&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>            <span class="hljs-string">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;post_data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;title&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>            <span class="hljs-string">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>尝试各种搜索<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=2019                   1结果<br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=2019-01-01             1结果<br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=post_data:2019-01-01   1结果<br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=post_data:2019         1结果<br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=xxxxx                  0结果<br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=third                  0结果<br></code></pre></td></tr></table></figure><br>搜索结果为什么不一致，因为es自动建立mapping的时候，设置了不同的field不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了<code>_all field</code>和<code>post_data field</code>的搜索表现完全不一样。</p><h1 id="5-2-精确匹配与全文搜索的对比分析"><a href="#5-2-精确匹配与全文搜索的对比分析" class="headerlink" title="5.2 精确匹配与全文搜索的对比分析"></a>5.2 精确匹配与全文搜索的对比分析</h1><h2 id="5-2-1-exact-value-精确匹配"><a href="#5-2-1-exact-value-精确匹配" class="headerlink" title="5.2.1 exact value 精确匹配"></a>5.2.1 exact value 精确匹配</h2><p>2019-01-01，exact value，搜索的时候，必须输入2019-01-01，才能搜索出来<br>如果输入一个01，是搜索不出来的，type=date是，是精确匹配<br><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> post_date=<span class="hljs-string">&#x27;2019-01-01&#x27;</span><br></code></pre></td></tr></table></figure></p><h2 id="5-2-2-full-text-全文检索"><a href="#5-2-2-full-text-全文检索" class="headerlink" title="5.2.2 full text 全文检索"></a>5.2.2 full text 全文检索</h2><p>搜“笔记电脑”，笔记本电脑词条不会出现。<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%笔记电脑%&#x27;</span><br></code></pre></td></tr></table></figure></p><ol><li>缩写<code>vs.</code>全称：<code>cn</code> vs <code>china</code></li><li>格式转化：like liked likes</li><li>大小写：Tom vs tom</li><li>同义词：like vs love</li></ol><p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配。深入NLP，自然语义处理。</p><h2 id="5-3-全文检索下倒排索引核心原理快速揭秘"><a href="#5-3-全文检索下倒排索引核心原理快速揭秘" class="headerlink" title="5.3 全文检索下倒排索引核心原理快速揭秘"></a>5.3 全文检索下倒排索引核心原理快速揭秘</h2><p><strong>分词，初步的倒排索引的建立</strong><br><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">doc1: i really liked <span class="hljs-keyword">my</span> small dogs, <span class="hljs-keyword">and</span> i think <span class="hljs-keyword">my</span> mom also liked them.<br>doc2: he never liked <span class="hljs-keyword">and</span> dogs, so i hope <span class="hljs-keyword">that</span> <span class="hljs-keyword">my</span> mom will <span class="hljs-keyword">not</span> expect <span class="hljs-keyword">me</span> <span class="hljs-keyword">to</span> liked him.<br></code></pre></td></tr></table></figure></p><p><strong>搜索</strong><br><code>mother like little dog</code>，在搜索前先分词，然后逐一与doc中的分词进行对比，但是目前不可能有结果。</p><p><strong>重建倒排索引</strong><br>normalization正规化，建立倒排索引的时候，会执行一个操作，也就是说对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率。<br>时态的转换，单复数的转换，同义词的转换，大小写的转换<br><figure class="highlight xl"><table><tr><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">mom</span> -&gt;</span> mother<br><span class="hljs-function"><span class="hljs-title">liked</span> -&gt;</span> like<br><span class="hljs-function"><span class="hljs-title">small</span> -&gt;</span> little<br><span class="hljs-function"><span class="hljs-title">dogs</span> -&gt;</span> dog<br></code></pre></td></tr></table></figure><br>重新建立倒排索引，加入normalization，再次用<code>mother liked little dog</code>搜索，就可以搜索到了。</p><h2 id="5-4-分词器analyzer"><a href="#5-4-分词器analyzer" class="headerlink" title="5.4 分词器analyzer"></a>5.4 分词器analyzer</h2><h3 id="5-4-1-什么是分词器analyzer"><a href="#5-4-1-什么是分词器analyzer" class="headerlink" title="5.4.1 什么是分词器analyzer"></a>5.4.1 什么是分词器analyzer</h3><p>作用：切分词语，normalization（提升recall召回率）<br>给es一段句子，然后将这段句子拆分成一个个单个的单词，同时对每个单词进行normalication（时态转换，单复数转换）。<br>recall：召回率，搜索的时候，增加能够搜索到的结果的数量。</p><p>analyzer由三个部分组成：</p><ol><li>character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的，过滤html标签，<code>&amp; -&gt; and</code></li><li>tokenizer：分词，<code>hello you and me -&gt; hello,you,and,me</code></li><li>token filter：lowercase，stop word,synonymom,<code>dogs -&gt; dog</code>,<code>liked -&gt; like</code>,<code>Tom -&gt; tom</code>,<code>a/the/an -&gt; 去除</code>,<code>mother -&gt; mom</code>,<code>small -&gt; little</code>(<code>stop word停词器：了的呢</code>)</li></ol><p>一个分词器很重要，将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引。</p><h3 id="5-4-2-内置分词器的介绍"><a href="#5-4-2-内置分词器的介绍" class="headerlink" title="5.4.2 内置分词器的介绍"></a>5.4.2 内置分词器的介绍</h3><p><strong><em>例句：Set the shape to semi-transparent by calling set_trans(5)</em></strong></p><ul><li>standard analyzer标准分词：set,the,shape,to,semi,transparent,by,calling,set_trans,5(默认的是Standard)</li><li>simple analyzer简单分词器：set,the,shape,to,semi,transparent,by,calling,set_trans</li><li>whitespace analyzer：Set,the,shape,to,semi-transparent,by,calling,set_trans(5)</li><li>language analyzer(特定的语言的分词器，比如english)：set,shape,semi,transparent,call,set_trans,5</li></ul><h2 id="5-5-query-string-根据字段分词策略"><a href="#5-5-query-string-根据字段分词策略" class="headerlink" title="5.5 query string 根据字段分词策略"></a>5.5 query string 根据字段分词策略</h2><h3 id="5-5-1-query-string-分词"><a href="#5-5-1-query-string-分词" class="headerlink" title="5.5.1 query string 分词"></a>5.5.1 query string 分词</h3><p>query string 必须以和index建立时相同的analyzer进行分词<br>query string 对exact value和fulltext的区别对待</p><p><strong><em>如</em></strong><br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">date</span>: exact <span class="hljs-keyword">value</span>精确匹配<br><span class="hljs-type">text</span>: <span class="hljs-keyword">full</span> <span class="hljs-type">text</span>全文检索<br></code></pre></td></tr></table></figure></p><h3 id="5-5-2-测试分词器"><a href="#5-5-2-测试分词器" class="headerlink" title="5.5.2 测试分词器"></a>5.5.2 测试分词器</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Text to analyze 70&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下<br><figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs clojure">&#123;<br>  &#123;<br>    <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><ul><li>token实际存储的term关键字</li><li>position在此词条在原文中的位置</li><li>start_offset/end_offset字符在原始字符串中的位置</li></ul><h2 id="5-6-mapping回顾"><a href="#5-6-mapping回顾" class="headerlink" title="5.6 mapping回顾"></a>5.6 mapping回顾</h2><ol><li>往es里面直接插入数据，es会自动建立索引，同时建立对应的mapping</li><li>mapping中就自动定了每个field的数据类型</li><li>不同的数据类型，可能有的是exact value，有的是full text</li><li>exact value，在建立倒排索引的时候，分词的时候，是将整个值要一起作为一个关键词建立倒排索引中的；full text，会经历各种各样的处理，分词，normalization（时态转换，同义词转换，大小写转换），才会建立到倒排索引中。</li><li>同时，exact value和full text 类型的field就决定了，在一个搜索过来的时候，对exact value field或者是full text field进行搜索的行为也是不一样的，会跟建立倒排索引的行为保持一致；比如说exact value搜索的时候，就是直接按照整个值进行匹配，full text query string，也会进行分词和normalization再去倒排索引中去搜索。</li><li>可以用es的dynamic mapping，让其自动建立mapping，包括自动设置数据类型；也可以提前手动创建index和tmapping，自己对各个field进行设置，包括数据类型，索引行为，分词器等。</li></ol><h2 id="5-7-mapping的核心数据类型以及dynamic-mapping"><a href="#5-7-mapping的核心数据类型以及dynamic-mapping" class="headerlink" title="5.7 mapping的核心数据类型以及dynamic mapping"></a>5.7 mapping的核心数据类型以及dynamic mapping</h2><h3 id="5-7-1-核心的数据类型"><a href="#5-7-1-核心的数据类型" class="headerlink" title="5.7.1 核心的数据类型"></a>5.7.1 核心的数据类型</h3><p>下面展示部分类型：<br>string: text and keyword<br>byte、short、integer、long、float、double<br>boolean<br>date</p><h3 id="5-7-2-dynamic-mapping-推测规则"><a href="#5-7-2-dynamic-mapping-推测规则" class="headerlink" title="5.7.2 dynamic mapping 推测规则"></a>5.7.2 dynamic mapping 推测规则</h3><p><code>true or false -&gt; boolean</code><br><code>123 -&gt; long</code><br><code>123.45 -&gt; double</code><br><code>2019-01-01 -&gt; date</code><br><code>&quot;hello world -&gt; text/keyword&quot;</code></p><h3 id="5-7-3-查看mapping"><a href="#5-7-3-查看mapping" class="headerlink" title="5.7.3 查看mapping"></a>5.7.3 查看mapping</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/index/</span>_mapping<br></code></pre></td></tr></table></figure><h2 id="5-8-手动管理mapping"><a href="#5-8-手动管理mapping" class="headerlink" title="5.8 手动管理mapping"></a>5.8 手动管理mapping</h2><h3 id="5-8-1-查询所有索引的映射"><a href="#5-8-1-查询所有索引的映射" class="headerlink" title="5.8.1 查询所有索引的映射"></a>5.8.1 查询所有索引的映射</h3><p><code>GET /_mapping</code></p><h3 id="5-8-2-创建映射！！"><a href="#5-8-2-创建映射！！" class="headerlink" title="5.8.2 创建映射！！"></a>5.8.2 创建映射！！</h3><p>创建索引后，应该立即手动创建映射<br><figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf">PUT book/<span class="hljs-variable">_mapping</span><br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;description&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;english&quot;</span>,<br>      <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;english&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;pic&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-string">&quot;studymodel&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>Text文本类型</strong></p><ol><li><p>analyzer<br>通过analyzer属性指定分词器。<br>上边指定了analyzer是指在索引和搜索都是用english，如果单独想定义搜索时使用的分词器则可以通过<code>saerch_analyzer</code>属性。</p></li><li><p>index<br>index属性指定是否索引。<br>默认<code>index=true</code>，即要进行索引，只能进行索引才可以从索引库搜索到。<br>但是也有一些内容不需要索引，比如：商品图片地址只被用来展示图片，不进行搜索图片，此时可以将index设置为false。<br>删除索引，重新创建映射，将pic的index设置为false，尝试根据pic去搜索，结果搜索不到数据。</p></li><li><p>store<br>是否在source之外存储，每个文档索引后会在ES中保存一份原始文档，存放在<strong>source</strong>中，一般情况下不需要设置store为true，因为在source中已经有一份原始文档了。</p></li></ol><p><strong><em>测试</em></strong><br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/index_name/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>keyword关键字字段</strong><br>目前已经取代了<code>index:false</code>。之前介绍的text文本字段在映射时要设置分词器，keyword字段为关键字字段，通常搜索keyword是按照整体搜索，索引创建keyword字段的索引时是不进行分词的。keyword字段通常用于过滤、排序、聚合等。</p><p><strong>date日期类型</strong><br>日期类型不用设置分词器。通常日期类型的字段用于排序。<br>format，通过format设置日期格式。<br><strong><em>例子：</em></strong><br>下边的设置允许date字段存储年月日时分秒、年月日及毫秒三种格式。<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;timestamp&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>      <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>数值类型</strong><br>下面是es支持的数值类型</p><div class="table-container"><table><thead><tr><th>类型名称</th></tr></thead><tbody><tr><td>long</td></tr><tr><td>integer</td></tr><tr><td>short</td></tr><tr><td>byte</td></tr><tr><td>double</td></tr><tr><td>float</td></tr><tr><td>half_float</td></tr><tr><td>scaled_float</td></tr></tbody></table></div><ol><li>尽量选择范围小的类型，提高搜索效率</li><li>对于浮点数尽量用比例因子， 比如一个价格字段，单位为元，将比例因子设置为100，这在es中会按<strong>分</strong>存储。<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;price&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;scaled_float&quot;</span>,<br>  <span class="hljs-string">&quot;scaling_factor&quot;</span>: <span class="hljs-number">100</span><br>&#125;,<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-8-3-修改映射"><a href="#5-8-3-修改映射" class="headerlink" title="5.8.3 修改映射"></a>5.8.3 修改映射</h3><p>只能创建index时，手动建立mapping，或者新增field mapping，但是不能修改field mapping。<br>因为已有数据按照映射早已分词存储好。如果修改，那这些存储的数据怎么办。</p><p>新增一个字段mapping<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/book/</span>_mapping<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;new_field_name&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;false&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="5-8-4-删除映射"><a href="#5-8-4-删除映射" class="headerlink" title="5.8.4 删除映射"></a>5.8.4 删除映射</h3><p>通过删除索引来删除映射。</p><h2 id="5-9-复杂数据类型"><a href="#5-9-复杂数据类型" class="headerlink" title="5.9 复杂数据类型"></a>5.9 复杂数据类型</h2><h3 id="5-9-1-multivalue-field"><a href="#5-9-1-multivalue-field" class="headerlink" title="5.9.1 multivalue field"></a>5.9.1 multivalue field</h3><p>{“tags”: [“tag1”, “tag2”]}<br>建立索引时与string时语言的，数据类型不能混。</p><h3 id="5-9-2-empty-field"><a href="#5-9-2-empty-field" class="headerlink" title="5.9.2 empty field"></a>5.9.2 empty field</h3><p>null、[]、[null]</p><h3 id="5-9-3-object-field"><a href="#5-9-3-object-field" class="headerlink" title="5.9.3 object field"></a>5.9.3 object field</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/company/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;china&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;guangdong&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;guangzhou&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">27</span>,<br>  <span class="hljs-string">&quot;join_date&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>address: object 类型</p><p>查询映射：<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/company/</span>_mapping<br></code></pre></td></tr></table></figure></p><p>object数据：<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;country&quot;</span>: <span class="hljs-string">&quot;china&quot;</span>,<br>    <span class="hljs-attr">&quot;province&quot;</span>: <span class="hljs-string">&quot;guangdong&quot;</span>,<br>    <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;guangzhou&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">27</span>,<br>  <span class="hljs-attr">&quot;join_date&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>底层存储格式<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;address.country&quot;</span>: [china],<br>  <span class="hljs-attr">&quot;address.province&quot;</span>: [guangdong],<br>  <span class="hljs-attr">&quot;address.city&quot;</span>: [guangzhou],<br>  <span class="hljs-attr">&quot;name&quot;</span>: [jack],<br>  <span class="hljs-attr">&quot;age&quot;</span>: [<span class="hljs-number">27</span>],<br>  <span class="hljs-attr">&quot;join_date&quot;</span>: [<span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>]<br>&#125;<br></code></pre></td></tr></table></figure></p><p>对象数组：<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;author&quot;</span>: [<br>    &#123; <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack White&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">55</span>, <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tom Jones&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">39</span>, <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Kiity Smith&quot;</span> &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></p><p>底层存储格式：<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;author.age&quot;</span>: [<span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">39</span>],<br>  <span class="hljs-attr">&quot;author.name&quot;</span>: [<span class="hljs-string">&quot;Jack White&quot;</span>, <span class="hljs-string">&quot;Tom Jones&quot;</span>, <span class="hljs-string">&quot;Kiity Smith&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="六、索引-Index-入门"><a href="#六、索引-Index-入门" class="headerlink" title="六、索引 Index 入门"></a>六、索引 Index 入门</h2><h1 id="6-1-索引管理"><a href="#6-1-索引管理" class="headerlink" title="6.1 索引管理"></a>6.1 索引管理</h1><h2 id="6-1-1-为什么需要手动创建索引"><a href="#6-1-1-为什么需要手动创建索引" class="headerlink" title="6.1.1 为什么需要手动创建索引"></a>6.1.1 为什么需要手动创建索引</h2><p>直接PUT数据，es会自动生成索引，并建立动态映射dynamic mapping。<br>在生产上，我们需要自己手动建立索引和映射，为了更好的管理索引。就像数据库的建表语句一样。</p><h2 id="6-1-2-索引管理"><a href="#6-1-2-索引管理" class="headerlink" title="6.1.2 索引管理"></a>6.1.2 索引管理</h2><h3 id="1-创建索引"><a href="#1-创建索引" class="headerlink" title="1 创建索引"></a>1 创建索引</h3><p>创建索引语法<br><figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">PUT</span> /<span class="hljs-meta">index</span><br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;&#125;,<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aliases&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default_index&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong><em>例如</em></strong><br><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">PUT my_index<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;number_of_replicas&quot;</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;field1&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;field2&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aliases&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default_index&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="2-查询索引"><a href="#2-查询索引" class="headerlink" title="2 查询索引"></a>2 查询索引</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /my_index<br><span class="hljs-builtin-name">GET</span> /my_index/_mapping<br><span class="hljs-builtin-name">GET</span> /my_index/_setting<br></code></pre></td></tr></table></figure><h3 id="3-修改索引"><a href="#3-修改索引" class="headerlink" title="3 修改索引"></a>3 修改索引</h3><p>修改副本数<br><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">PUT my_index/_settings<br>&#123;<br>  <span class="hljs-string">&quot;number_of_replicas&quot;</span>: <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="4-删除索引"><a href="#4-删除索引" class="headerlink" title="4 删除索引"></a>4 删除索引</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">DELETE</span> /my_index<br><span class="hljs-keyword">DELETE</span> /index_one,index_two<br><span class="hljs-keyword">DELETE</span> /index_*<br><span class="hljs-keyword">DELETE</span> /_all<br></code></pre></td></tr></table></figure><p>为了安全起见，防止恶意删除索引，删除时必须指定索引名的配置：<br><figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf">elasticsearch.yml<br><span class="hljs-built_in">action</span>.destructive_requires_name: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></p><h1 id="6-2-定制分词器"><a href="#6-2-定制分词器" class="headerlink" title="6.2 定制分词器"></a>6.2 定制分词器</h1><h2 id="6-2-1-默认的分词器"><a href="#6-2-1-默认的分词器" class="headerlink" title="6.2.1 默认的分词器"></a>6.2.1 默认的分词器</h2><p><strong>standard</strong><br>分词三个组件：<strong>character filter</strong>, <strong>tokenizer</strong>, <strong>token filter</strong>。</p><ul><li>standard tokenizer:以单词边界进行切分</li><li>standard token filter:什么都不做</li><li>lowercase token filter:将所有字母转换为小写</li><li>stop token filer（默认被禁用）:移除停用词，比如a、the、it等</li></ul><h2 id="6-2-2-修改分词器的设置"><a href="#6-2-2-修改分词器的设置" class="headerlink" title="6.2.2 修改分词器的设置"></a>6.2.2 修改分词器的设置</h2><p>启用english停用词<code>token filter</code><br><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">PUT my_index<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;es_std&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>          <span class="hljs-string">&quot;stopword&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="6-2-3-定制化自己的分词器"><a href="#6-2-3-定制化自己的分词器" class="headerlink" title="6.2.3 定制化自己的分词器"></a>6.2.3 定制化自己的分词器</h2><figure class="highlight prolog"><table><tr><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">PUT</span> my_index<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;char_filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;&amp;_to_and&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;mapping&quot;</span>,<br>          <span class="hljs-string">&quot;mapping&quot;</span>: [<span class="hljs-string">&quot;&amp;=&gt; and&quot;</span>]<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;my_stopword&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;stop&quot;</span>,<br>          <span class="hljs-string">&quot;stopwords&quot;</span>: [<span class="hljs-string">&quot;the&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>]<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;my_analyzer&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br>          <span class="hljs-string">&quot;char_filter&quot;</span>: [<span class="hljs-string">&quot;html_strip&quot;</span>, <span class="hljs-string">&quot;&amp;_to_and&quot;</span>],<br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: [<span class="hljs-string">&quot;lowercase&quot;</span>, <span class="hljs-string">&quot;my_stopwords&quot;</span>]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><em>测试</em></strong><br><figure class="highlight smalltalk"><table><tr><td class="code"><pre><code class="hljs smalltalk"><span class="hljs-type">GET</span> my_index/_analyze<br>&#123;<br>  <span class="hljs-comment">&quot;analyzer&quot;</span>: <span class="hljs-comment">&quot;my_analyzer&quot;</span>,<br>  <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;tom&amp;jerry are a friend in the house,&lt;a&gt;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="6-3-type-底层结构及弃用原因"><a href="#6-3-type-底层结构及弃用原因" class="headerlink" title="6.3 type 底层结构及弃用原因"></a>6.3 type 底层结构及弃用原因</h1><h2 id="6-3-1-type-是什么"><a href="#6-3-1-type-是什么" class="headerlink" title="6.3.1 type 是什么"></a>6.3.1 type 是什么</h2><p>type，是一个index中用来区分类似的数据的，类似的数据，但是可能有不同的fields，而且有不同的属性来控制索引建立，分词器。<br>field的value，在底层的lucene中建立索引的时候，全部都是opaque bype类型，不区分类型的。<br>lucene是没有type的概念，在document中，实际上将type作为一个document的field来存储，即type，es通过type来进行type的过滤和筛选。</p><h2 id="6-3-2-es-中不同-type-存储机制"><a href="#6-3-2-es-中不同-type-存储机制" class="headerlink" title="6.3.2 es 中不同 type 存储机制"></a>6.3.2 es 中不同 type 存储机制</h2><p>一个index中的多个type，实际上是放在一起存储的，因此一个index下，不能有多个type重名，二类型或者其他设置不同的，因为那样是无法处理的。<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;goods&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;electronic_goods&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>          &#125;,<br>          <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>          &#125;,<br>          <span class="hljs-attr">&quot;service_period&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">&quot;fresh_goods&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>          &#125;,<br>          <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>          &#125;,<br>          <span class="hljs-attr">&quot;eat_period&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong><em>测试</em></strong><br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/goods/</span>electronic_goods/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>,<br>  <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">11.1</span>,<br>  <span class="hljs-string">&quot;service_period&quot;</span>: <span class="hljs-string">&quot;one&quot;</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/goods/</span>fresh_goods/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;B&quot;</span>,<br>  <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">21.1</span>,<br>  <span class="hljs-string">&quot;eat_period&quot;</span>: <span class="hljs-string">&quot;two&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>es文档在底层的存储是这样的：<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;goods&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;_type&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>        <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;service_period&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>      &#125;<br>      <span class="hljs-string">&quot;eat_period&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>底层数据存储格式<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;electronic_goods&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>,<br>  <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">11.1</span>,<br>  <span class="hljs-attr">&quot;service_period&quot;</span>: <span class="hljs-string">&quot;one&quot;</span>,<br>  <span class="hljs-attr">&quot;eat_period&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br>&#123;<br>  <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;fresh_goods&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;B&quot;</span>,<br>  <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">21.1</span>,<br>  <span class="hljs-attr">&quot;service_period&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;eat_period&quot;</span>: <span class="hljs-string">&quot;two&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="6-3-3-type-弃用"><a href="#6-3-3-type-弃用" class="headerlink" title="6.3.3 type 弃用"></a>6.3.3 type 弃用</h2><p>同一索引下，不同type的数据存储其他type的field大量空值，造成资源浪费。索引，不同数据类型，要放到不同的索引下。<br><strong><em>es9中将会彻底删除type。</em></strong></p><h1 id="6-4-定制dynamic-mapping"><a href="#6-4-定制dynamic-mapping" class="headerlink" title="6.4 定制dynamic mapping"></a>6.4 定制dynamic mapping</h1><h2 id="6-4-1-定制dynamic策略"><a href="#6-4-1-定制dynamic策略" class="headerlink" title="6.4.1 定制dynamic策略"></a>6.4.1 定制dynamic策略</h2><ul><li>true：遇到陌生字段，就进行dynamic mapping</li><li>false：新监测到的字段将被忽略。这些字段将不会被索引，因此将无法搜索，但将出现在返回点击的源字段中。这些字段不会添加到映射中，必须显式添加新字段。</li><li>strict：遇到陌生字段，就报错</li></ul><p>创建mapping<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">PUT <span class="hljs-string">/my_index1</span><br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dynamic&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,<br>        <span class="hljs-string">&quot;dynamic&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>插入数据<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT my_index1<span class="hljs-regexp">/_doc/</span><span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my name&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;hangzhou&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;hangzhou&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>但是当我们指定搜索content中的内容是搜索不到的<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> my_index1/_search?<span class="hljs-attribute">q</span>=content:hello<br></code></pre></td></tr></table></figure><br>因为我们在外层dynamic中设置了false，因此他虽然可以添加成功并且在无条件搜索时可以带出来，但是内容搜索是无法找到的。</p><h2 id="6-4-2-自定义dynamic-mapping策略"><a href="#6-4-2-自定义dynamic-mapping策略" class="headerlink" title="6.4.2 自定义dynamic mapping策略"></a>6.4.2 自定义dynamic mapping策略</h2><p>es会根据传入的值，推断类型。</p><h3 id="1-date-detection-日期探测"><a href="#1-date-detection-日期探测" class="headerlink" title="1.date_detection 日期探测"></a>1.date_detection 日期探测</h3><p>默认会按照一定格式识别date，比如yyyy-MM-dd。但是如果某个field先过来一个2017-01-01的值，就会被自动dynamic mapping成date，后面如果再来一个<code>&quot;hello&quot;</code>之类的值，就会报错。可以手动关闭某个type的date_detection，如果有需要，自己手动指定某个field为date类型。<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">PUT my_index<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;date_detection&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,<br>        <span class="hljs-string">&quot;dynamic&quot;</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="2-自定义日期格式"><a href="#2-自定义日期格式" class="headerlink" title="2.自定义日期格式"></a>2.自定义日期格式</h3><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">PUT my_index<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dynamic_date_formats&quot;</span>: [<span class="hljs-string">&quot;MM/dd/yyyy&quot;</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-numeric-detection-数字探测"><a href="#3-numeric-detection-数字探测" class="headerlink" title="3.numeric_detection 数字探测"></a>3.numeric_detection 数字探测</h3><p>虽然json支持本机浮点和整数数据类型，但某些应用程序或语言有时可能将数字呈现为字符串。通常正确的解决方案是显式地映射这些字段，但是可以启用数字检测（默认下禁用）来自动完成这些操作。<br><figure class="highlight puppet"><table><tr><td class="code"><pre><code class="hljs puppet">PUT my_index<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;numeric_detection&quot;</span>: true<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>测试<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT my_index<span class="hljs-regexp">/_doc/</span><span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;my_float&quot;</span>: <span class="hljs-string">&quot;1.0&quot;</span>,<br>  <span class="hljs-string">&quot;my_integer&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="6-4-3-定制自己的dynamic-mapping-template"><a href="#6-4-3-定制自己的dynamic-mapping-template" class="headerlink" title="6.4.3 定制自己的dynamic mapping template"></a>6.4.3 定制自己的dynamic mapping template</h2><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">PUT my_index<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dynamic_templates&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;en&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: <span class="hljs-string">&quot;*_en&quot;</span>,<br>          <span class="hljs-string">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>          <span class="hljs-string">&quot;mapping&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;english&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入数据<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT my_index<span class="hljs-regexp">/_doc/</span><span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;this is my first article&quot;</span><br>&#125;<br><br>PUT my_index<span class="hljs-regexp">/_doc/</span><span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;title_en&quot;</span>: <span class="hljs-string">&quot;this is my first article&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><br>查询数据<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> my_index/_search?<span class="hljs-attribute">q</span>=is<br></code></pre></td></tr></table></figure></p><p>模版参数<br><figure class="highlight d"><table><tr><td class="code"><pre><code class="hljs d"><span class="hljs-string">&quot;match&quot;</span>: <span class="hljs-string">&quot;long_*&quot;</span><br><span class="hljs-string">&quot;unmatch&quot;</span>: <span class="hljs-string">&quot;long_*&quot;</span><br><span class="hljs-string">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>path_match<span class="hljs-string">&quot;: &quot;</span><span class="hljs-built_in">long</span>.*<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>path_unmatch<span class="hljs-string">&quot;: &quot;</span><span class="hljs-built_in">long</span>.*<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>match_pattern<span class="hljs-string">&quot;: &quot;</span>regex<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>match<span class="hljs-string">&quot;: &quot;</span>^profit_\d+$<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ol><li><p>结构化搜索<br>默认情况下，es将字符串字段映射为带有子关键字字段的文本字段。但是，如果只对结构化内容进行索引，而对全文搜索不感兴趣，则可与你将字段映射为关键字。请注意，这意味着为了搜索这些字段，必须搜索索引所使用的完全相同的值。</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;strings_as_keywords&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>    <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>仅搜索<br>与前面的实例相反，如果您只关心字符串字段的全文搜索，并且不打算对字符串字段运行聚合、排序或精准搜索，可以告诉弹性搜索将其仅映射为文本字段。</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;strings_as_keywords&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>    <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>norms 不关心评分<br>norms是指标时间的评分因此。如果不关心评分，例如，如果从不按评分对文档进行排序，则可以在搜索中禁用这些评分因子的存储并节省一些空间。</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;strings_as_keywords&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>    <span class="hljs-attr">&quot;mapping&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-attr">&quot;norms&quot;</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">&quot;fields&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;keyword&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>          <span class="hljs-attr">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="6-5-零停机重建索引"><a href="#6-5-零停机重建索引" class="headerlink" title="6.5 零停机重建索引"></a>6.5 零停机重建索引</h1><h2 id="6-5-1-零停机重建索引"><a href="#6-5-1-零停机重建索引" class="headerlink" title="6.5.1 零停机重建索引"></a>6.5.1 零停机重建索引</h2><p><strong>场景</strong><br>一个field的设置是不能被修改的，如果要修改一个field，那么应该重新按照新的mapping，建立index，然后将数据批量查询出来，重新用bulk api写入index中。<br>批量查询的时候，建议采用scroll api，并且采用多线程兵法的方式reindex数据，每次scroll就查询指定日期的一段数据，交给一个线程即可。</p><ol><li>一开始，依靠dynamic mapping，插入数据，但是不小心有些数据是2019-09-10这种日期格式的，所以title这种field被自动映射为date类型，实际上他应该是string类型的<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT my_index<span class="hljs-regexp">/_doc/</span><span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span><br>&#125;<br>PUT my_index<span class="hljs-regexp">/_doc/</span><span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;2019-01-02&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>当后期想索引种加入string类型的title值的时候，就会报错<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT my_index<span class="hljs-regexp">/_doc/</span><span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>报错<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">&#123;<br>  <span class="hljs-string">&quot;error&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;root_cause&quot;</span> : [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">mapper_parsing_exception</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>reason<span class="hljs-string">&quot; : &quot;</span>failed to parse field [title] <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-type">[date] </span><span class="hljs-keyword">in</span> document <span class="hljs-keyword">with</span> id <span class="hljs-string">&#x27;3&#x27;</span>. Preview <span class="hljs-keyword">of</span> field<span class="hljs-symbol">&#x27;s</span> value: <span class="hljs-symbol">&#x27;hello</span>&#x27;<span class="hljs-string">&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    ],</span><br><span class="hljs-string">    &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>mapper_parsing_exception<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>reason<span class="hljs-string">&quot; : &quot;</span>failed to parse field [title] <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-type">[date] </span><span class="hljs-keyword">in</span> document <span class="hljs-keyword">with</span> id <span class="hljs-string">&#x27;3&#x27;</span>. Preview <span class="hljs-keyword">of</span> field<span class="hljs-symbol">&#x27;s</span> value: <span class="hljs-symbol">&#x27;hello</span>&#x27;<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>caused_by<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>illegal_argument_exception<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>reason<span class="hljs-string">&quot; : &quot;</span>failed to parse date field [hello] <span class="hljs-keyword">with</span> format [strict_date_optional_time||epoch_millis]<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>caused_by<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">        &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>date_time_parse_exception<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>reason<span class="hljs-string">&quot; : &quot;</span>Failed to parse <span class="hljs-keyword">with</span> <span class="hljs-keyword">all</span> enclosed parsers<span class="hljs-string">&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;</span>status<span class="hljs-string">&quot; : 400</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure></li><li>此时，唯一的办法，就是进行reindex，也就是说，重新建立一个索引，将旧索引的数据查询出来，再导入新索引。</li><li>如果说旧索引的名字是old_index，新索引的名字是new_index，终端为java应用，已经在使用old_index在操作了，难道还要去停止java应用，修改使用的index为new_index，再重新启动java应用吗？这个过程种就会导致java应用停机，可用性降低。</li><li>所以说，给java应用一个别名，这个别名是指像旧索引的，java应用先用着，java应用先用prop_index alias来操作，此时实际只想的是旧的my_index。<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT my_index<span class="hljs-regexp">/_alias/</span>prop_index<br></code></pre></td></tr></table></figure></li><li>新建一个index，调整其title的类型为string<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">PUT my_index_new<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用scroll api将数据批量查询出来<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> my_index/_search?<span class="hljs-attribute">scroll</span>=1m<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 1<br>&#125;<br></code></pre></td></tr></table></figure>返回<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_scroll_id&quot;</span> : <span class="hljs-string">&quot;FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFFJvR3Q3SUlCZlJjeEhGdG5TNGh5AAAAAAAK618WT0FMLV9RRTFUMUd6TlA2RVdDNkpQQQ==&quot;</span>,<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;my_index&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;title&quot;</span> : <span class="hljs-string">&quot;2019-01-01&quot;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;my_index&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;title&quot;</span> : <span class="hljs-string">&quot;2019-01-02&quot;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用bulk api将scroll查出来的一批数据，批量写入新索引<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">PUT _bulk<br>&#123;<span class="hljs-string">&quot;index&quot;</span>: &#123;<span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;my_index_new&quot;</span>, <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;title&quot;</span> : <span class="hljs-string">&quot;2019-01-01&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li><li>反复循环8-9，查询一批数据，bulk导入</li><li>将prop_index alias切换到my_index_new上去，java应用就会直接通过index别名使用新的索引中的数据。<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">POST /_aliases<br>&#123;<br>  <span class="hljs-string">&quot;actions&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;remove&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;my_index&quot;</span>,<br>        <span class="hljs-string">&quot;alias&quot;</span>: <span class="hljs-string">&quot;prop_index&quot;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;add&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;my_index_new&quot;</span>,<br>        <span class="hljs-string">&quot;alias&quot;</span>: <span class="hljs-string">&quot;prop_index&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>直接通过prod_inidex来查询</li></ol><h2 id="6-5-2-生产实战：基于alias对client透明切换index"><a href="#6-5-2-生产实战：基于alias对client透明切换index" class="headerlink" title="6.5.2 生产实战：基于alias对client透明切换index"></a>6.5.2 生产实战：基于alias对client透明切换index</h2><p>对索引的增删使用index_name<br>对数据的处理使用index_aliase<br>当发生上面场景是，需要对数据切换至新的index中，并切换index_aliase至新的index中，这样就完成了无需服务停机的切换索引功能。</p><h2 id="七、中文分词器-IK分词器"><a href="#七、中文分词器-IK分词器" class="headerlink" title="七、中文分词器 IK分词器"></a>七、中文分词器 IK分词器</h2><h1 id="7-1-IK分词器安装使用"><a href="#7-1-IK分词器安装使用" class="headerlink" title="7.1 IK分词器安装使用"></a>7.1 IK分词器安装使用</h1><h2 id="7-1-1-中文分词器"><a href="#7-1-1-中文分词器" class="headerlink" title="7.1.1 中文分词器"></a>7.1.1 中文分词器</h2><p>standard分词器仅适用于英文。<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;老杨来了&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><br>IK分词器是目前最流行的es中文分词器。</p><h2 id="7-1-2-安装"><a href="#7-1-2-安装" class="headerlink" title="7.1.2 安装"></a>7.1.2 安装</h2><p>下载：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.9.3">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.9.3</a><br>配置到plugins中，并重启es。</p><h2 id="7-1-3-ik分词器基础知识"><a href="#7-1-3-ik分词器基础知识" class="headerlink" title="7.1.3 ik分词器基础知识"></a>7.1.3 ik分词器基础知识</h2><ul><li>ik_max_word：会将文本做最细粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分成“中华人民共和国”、“中华人民”、“中华”、“华人”、“人民共和国”、“人民大会堂”，会穷尽各种可能的组合。</li><li>ik_smart：会做最粗粒度的拆分，比如上面只会拆分为“中华人民共和国”、“人民大会堂”。</li></ul><h2 id="7-1-4-ik分词器的使用"><a href="#7-1-4-ik分词器的使用" class="headerlink" title="7.1.4 ik分词器的使用"></a>7.1.4 ik分词器的使用</h2><p>存储时，使用ik_max_word，搜索时，使用ik_smart<br><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">PUT <span class="hljs-built_in">test</span><br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;text&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>        <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>搜索如下信息：<br><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /my_index/_search?<span class="hljs-attribute">q</span>=会堂<br></code></pre></td></tr></table></figure></p><h1 id="7-2-IK配置文件"><a href="#7-2-IK配置文件" class="headerlink" title="7.2 IK配置文件"></a>7.2 IK配置文件</h1><h2 id="7-2-1-ik分词器配置文件"><a href="#7-2-1-ik分词器配置文件" class="headerlink" title="7.2.1 ik分词器配置文件"></a>7.2.1 ik分词器配置文件</h2><p>ik配置文件地址：<code>es/plugins/ik/config</code>目录</p><ul><li>IKAnalyzer.cfg.xml：用来配置自定义词库</li><li>main.dic：ik原生内置的中文词库，总共有27万多条，只要是这些单词，就会被分在一起</li><li>preposition.dic：介词</li><li>quantifier.dic：放了一些单位相关的词，量词</li><li>suffix.dic：放了一些后缀</li><li>surname.dic：中国的姓氏</li><li>stopword.dic：英文停用词</li></ul><p>ik原生最重要的两个配置文件</p><ul><li>main.dic：包含了原生的中文词语，会按照这个里面的词法去分词</li><li>stopword.dic：包含了英文的停用词</li></ul><h2 id="7-2-2-自定义词库"><a href="#7-2-2-自定义词库" class="headerlink" title="7.2.2 自定义词库"></a>7.2.2 自定义词库</h2><ol><li>自己建立词库：每年会涌现一些特殊的流行词，网红、喊麦、鬼畜，一般不会在ik的原生词库<br>自己补充自己的最新词语，在ik的词库里面<br>IKAnalyzer.cfg.xml：ext_dict，创建mydic.dic补充自己的词语，然后需要重启es，才能生效</li><li>自己建立停用词库：比如了、的、啥、么，不需要去建立索引，让大家搜索<br>custom/ext_stopword.dic，以及有了常用的中文停用词</li></ol><h1 id="7-3-使用mysql热更新词库"><a href="#7-3-使用mysql热更新词库" class="headerlink" title="7.3 使用mysql热更新词库"></a>7.3 使用mysql热更新词库</h1><h2 id="7-3-1-热更新"><a href="#7-3-1-热更新" class="headerlink" title="7.3.1 热更新"></a>7.3.1 热更新</h2><p>每次都是在es的扩展词典中，手动添加新词语，很坑。</p><ol><li>每次添加完，都需要重启es才生效</li><li>es是分布式的，可能有多个节点，不能每次都一个个节点上去修改</li></ol><p>es不停机，直接我们在外部某个地方添加新的词语，es中立即热加载这些新词语</p><p>热更新方法：</p><ol><li>基于ik分词器原生支持的热更新方法，部署一个web服务器，提供一个http接口，通过modified和tag两个http响应头，来提供词语的热更新</li><li>修改ik分词器源码，然后手动支持这些从mysql中每隔一定时间，自动加载的词库</li></ol><p>第一种，ikgit社区官方都不建议采用，使用第二种方案</p><h2 id="7-3-2-步骤"><a href="#7-3-2-步骤" class="headerlink" title="7.3.2 步骤"></a>7.3.2 步骤</h2><ol><li><p>下载源码 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a><br>ik分词器，是个标准的java maven工程，直接导入eclipse就可以看到源码</p></li><li><p>修改源代码</p></li></ol><ul><li>org.wltea.analyzer.dic.Dictionary类，160行Dictionary单例类的初始化方法，在这里需要创建一个我们自定义的线程，并启动它</li><li>org.wltea.analyzer.dic.HotDictReloadThread类：就是死循环，不断调用Dictionary.getSingleton().reLoadMainDict()，去重新加载词典</li><li>Dictionary类：399行，this.loadMySQLExtDict();加载mysql字典</li><li>Dictionary类：609行，this.loadMySQLStopwordDict();加载mysql停用词</li><li>config下jdbc-reload.properties。mysql配置文件</li></ul><ol><li><p>mvn package打包<br>target\releases\elasticsearch-analysis-ik-7.3.0.zip</p></li><li><p>解压缩ik压缩包<br>将mysql驱动jar，放入ik的目录下</p></li><li><p>修改jdbc配置</p></li><li><p>重启es</p></li></ol>]]></content>
    
    
    <summary type="html">讨论Spring基础知识</summary>
    
    
    
    <category term="分布式搜索" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="es" scheme="http://example.com/tags/es/"/>
    
    <category term="分布式搜索" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>chocolatey</title>
    <link href="http://example.com/2022/07/29/chocolatey/"/>
    <id>http://example.com/2022/07/29/chocolatey/</id>
    <published>2022-07-29T16:56:39.000Z</published>
    <updated>2022-07-29T09:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>包管理<br>-</p><p>针对windows的包管理工具：Chocolatey和Scoop。这里选择了Chocolatey试试水。</p><p>安装<br>-<br>打开cmd，需要管理员权限：输入下面的命令<br><figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">@&quot;%SystemRoot%\System32\WindowsPowerShell\v1<span class="hljs-number">.0</span>\powershell.exe<span class="hljs-string">&quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;</span>iex ((New-Object System.Net.WebClient).DownloadString(<span class="hljs-string">&#x27;https://chocolatey.org/install.ps1&#x27;</span>))<span class="hljs-string">&quot; &amp;&amp; SET &quot;</span>PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure></p><p>即可享受windows上的包管理了</p><p>下面给出了官方网址<br>[chocolatey]<a href="https://community.chocolatey.org/">https://community.chocolatey.org/</a></p>]]></content>
    
    
    <summary type="html">在centos终端配置ssr</summary>
    
    
    
    <category term="包管理" scheme="http://example.com/categories/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="包管理" scheme="http://example.com/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
